<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mlms_learning">
 
	<!-- 학습 실행 정보 조회 -->
	<select id="selectLearningExcnInfo" resultType="sangsMap" parameterType="map">
		select
			t1.lrn_excn_sn
			, t1.lrn_sn
			, t1.crt_model_flpth
			, t2.lrn_group_sn
			, (select lrn_group_nm from ML_LRN_GROUP t0 where t0.lrn_group_sn = t2.lrn_group_sn) as lrn_group_nm
			, t2.lrn_nm
			, t1.lrn_step_cd
			, TIMESTAMPDIFF(SECOND, t1.lrn_excn_bgng_dt, t1.lrn_excn_end_dt) as DIFF_SECOND
			, t2.REG_USER_ID
			, t3.trgt_traing_data_cnt
			, t3.traing_sttus_cd
			, DATE_FORMAT(t3.traing_bgng_dt, '%Y-%m-%d %H:%i:%s') as traing_bgng_dt
			, DATE_FORMAT(t3.traing_end_dt, '%Y-%m-%d %H:%i:%s') as traing_end_dt
			, t3.traing_err_mssage_cn
			, t4.lrn_dataset_sn
			, t4.dataset_sn as traing_dataset_sn
			, t4.lrn_dataset_nm as traing_lrn_dataset_nm
			, t4.excl_row_cnt
			, t5.data_col_cnt as traing_data_col_cnt
			, t5.data_row_cnt as traing_data_row_cnt
			, t5.data_kb_size as traing_data_kb_size
			, t5.data_flpth as traing_data_flpth
			, t5.data_orginl_flpth as traing_data_orginl_flpth
			, (select max(hder_indx) from ML_LRN_DATASET_HDER t0 where t0.lrn_dataset_sn = t4.lrn_dataset_sn and trgt_value_yn = 'Y') as traing_trget_hder_indx
			, (select hder_value from ML_LRN_DATASET_HDER t0 where t0.lrn_dataset_sn = t4.lrn_dataset_sn and trgt_value_yn = 'Y') as traing_trget_hder_value
			, t6.TEST_HIST_SN
			, t6.accrcy_rate
			, t6.recall_rate
			, t6.precise_rate
			, t6.f1_score
			, t6.trgt_test_data_cnt
			, t6.result_flpth
			, t6.trgt_value_exst_yn
			, DATE_FORMAT(t6.test_bgng_dt, '%Y-%m-%d %H:%i:%s') as test_begin_dt
			, DATE_FORMAT(t6.test_end_dt, '%Y-%m-%d %H:%i:%s') as test_end_dt
			, t6.test_err_mssage_cn
			, t7.lrn_dataset_nm as test_lrn_dataset_nm
			, t7.dataset_sn as test_dataset_sn
			, t8.data_col_cnt as test_data_col_cnt
			, t8.data_row_cnt as test_data_row_cnt
			, t8.data_kb_size as test_data_kb_size
			, t8.data_flpth as test_data_flpth
			, t8.data_orginl_flpth as test_data_orginl_flpth
			, (select max(hder_indx) from ML_LRN_DATASET_HDER t0 where t0.lrn_dataset_sn = t7.lrn_dataset_sn and trgt_value_yn = 'Y') as test_trget_hder_indx
			, (select hder_value from ML_LRN_DATASET_HDER t0 where t0.lrn_dataset_sn = t7.lrn_dataset_sn and trgt_value_yn = 'Y') as test_trget_hder_value
			, t1.traing_lrn_excn_sn
		from ML_LRN_EXECUT t1
			, ML_LRN t2
			, ML_TRAING_HIST t3
			, ML_LRN_DATASET t4
			, ML_DATASET t5
			, ML_TEST_HIST t6
			, ML_LRN_DATASET t7
			, ML_DATASET t8
		where t1.lrn_excn_sn = #{lrnExcnSn}
			and t1.lrn_sn = t2.lrn_sn
			and t1.traing_lrn_excn_sn = t3.lrn_excn_sn
			and t3.lrn_dataset_sn = t4.lrn_dataset_sn
			and t4.dataset_sn = t5.dataset_sn
			and t1.lrn_excn_sn = t6.lrn_excn_sn
			and t6.lrn_dataset_sn = t7.lrn_dataset_sn
			and t7.dataset_sn = t8.dataset_sn
			<choose>
				<when test="testHistSn != null and testHistSn != '' ">
					and t6.TEST_HIST_SN = #{testHistSn}
				</when>
				<otherwise>
					and t6.TEST_HIST_SN = 1
				</otherwise> 
			</choose>
	</select>
	
	
	<!-- 테스트 결과 정보 조회 -->
	<select id="selectModelAttrImportantList" resultType="sangsMap" parameterType="map">
		select
			result_attrb_sn
			, result_attrb_nm
			, result_attrb_rate
		from ML_TEST_RESULT_ATTRB_INFO
		where lrn_excn_sn = #{traingLrnExcnSn}
			and result_attrb_ty = "ATTR_IMPTT"
	</select>
	
	
 
	
	<select id="selectNextLearningSn" resultType="Integer" parameterType="map">
		select 
			ifnull(max(lrn_sn), 0) + 1 as nextLrnSn
		from ML_LRN
	</select>
	
	<select id="selectNextLearningExcnSn" resultType="Integer" parameterType="map">
		select 
			ifnull(max(lrn_excn_sn), 0) + 1
		from ML_LRN_EXECUT
	</select>
	
	<!-- 학습정보 등록 -->
	<insert id="insertLearningInfo" parameterType="map">
		insert into ML_LRN (
			lrn_sn, lrn_group_sn, lrn_nm,  del_yn, lrn_dc, REG_USER_ID, REG_DT, CHG_USER_ID, CHG_DT
		) values (
			#{lrnSn}, #{lrnGroupSn}, #{lrnNm}, #{delYn}, #{lrnDc}, #{regUserId}, now(), #{regUserId}, now()			
		)
	</insert>
	
	<!-- 학습 실행 정보 등록 -->
	<insert id="insertLearningExcnInfo" parameterType="map">
		insert into ML_LRN_EXECUT (
			lrn_excn_sn, LRN_SN, crt_model_flpth, lrn_step_cd, uld_model_yn, TRAING_lrn_excn_sn
		) values (
			#{lrnExcnSn}, #{lrnSn}, #{crtModelFlpth}, #{lrnStepCd}, #{uldModelYn},
			<choose>
				<when test="trainglrnExcnSn != null and trainglrnExcnSn != '' ">
					#{trainglrnExcnSn}
				</when>
				<otherwise>
					#{lrnExcnSn}
				</otherwise> 
			</choose>
		)
	</insert>
	
	<!-- 훈련 이력 정보 등록 -->
	<insert id="insertTrainingHistInfo" parameterType="map">
		insert into ML_TRAING_HIST (
			lrn_excn_sn, lrn_dataset_sn, traing_sttus_cd, trgt_traing_data_cnt, REG_USER_ID, REG_DT, CHG_USER_ID, CHG_DT
		) values (
			#{lrnExcnSn}, #{lrnDatasetSn}, #{traingSttusCd}, #{trgtTraingDataCnt}, #{regUserId}, now(), #{regUserId}, now()
		)
	</insert>
	<!-- 테스트 이력 정보 등록 -->
	<insert id="insertTestHistInfo" parameterType="map">
		insert into ML_TEST_HIST (
			lrn_excn_sn, test_hist_sn,  lrn_dataset_sn, result_flpth
			, trgt_value_exst_yn
			, REG_USER_ID, REG_DT, CHG_USER_ID, CHG_DT
		) values (
			#{lrnExcnSn}, #{testHistSn}, #{lrnDatasetSn}, #{resultFlpth}
			, (case when (select count(*) from ML_LRN_DATASET_HDER where lrn_dataset_sn = #{lrnDatasetSn} and trgt_value_yn = 'Y') > 0 then 'Y' else 'N' end)
			, #{regUserId}, now(), #{regUserId}, now()
		)
	</insert>
	
	<!-- 테스트 이력 순번 채번 -->
	<select id="selectNextTestHistSn" resultType="Integer" parameterType="map">
		select ifnull(max(test_hist_sn), 0) + 1 as sn
		from ML_TEST_HIST
		where lrn_excn_sn = #{lrnExcnSn}
	</select>
	
	
	<select id="selectNextModuleApplSn" resultType="Integer" parameterType="map">
		select ifnull(max(module_aplcn_sn), 0) + 1 
		from ML_LRN_APPLC_MODULE
		where lrn_excn_sn = #{lrnExcnSn}
	</select>
	
	<!-- 학습적용모듈정보 등록 -->
	<insert id="insertAplcnModuleInfo" parameterType="map">
		insert into ML_LRN_APPLC_MODULE ( 
			lrn_excn_sn, module_aplcn_sn, module_sn, module_aplcn_ty_cd, REG_USER_ID, REG_DT, CHG_USER_ID, CHG_DT
		) values (
			#{lrnExcnSn}, #{moduleAplcnSn}, #{moduleSn}, #{moduleAplcnTyCd}, #{regUserId}, now(), #{regUserId}, now()
		)
	</insert>
	
	<!-- 학습적용모듈파라미터정보 등록 -->
	<insert id="insertAplcnModuleParamInfo" parameterType="map">		
		insert into ML_LRN_APPLC_MODULE_PARAMTR (
			lrn_excn_sn, module_aplcn_sn
			, paramtr_sn
			, paramtr_nm, paramtr_value, module_sn, REG_USER_ID, REG_DT, CHG_USER_ID, CHG_DT
		) values (
			#{lrnExcnSn}, #{moduleAplcnSn}
			, (select ifnull(max(paramtr_sn), 0) + 1 from ML_LRN_APPLC_MODULE_PARAMTR t0 where t0.lrn_excn_sn = #{lrnExcnSn} and t0.module_aplcn_sn = #{moduleAplcnSn})
			, #{paramtrNm}, #{paramtrValue}, #{moduleSn}, #{regUserId}, now(), #{regUserId}, now()
		)				
	</insert>
	
	
	
	<!-- 훈련 이력 에러 메시지 update -->
	<update id="updatetraingHistErrorMsg" parameterType="map">
		update ML_TRAING_HIST set 
			traing_err_mssage_cn = #{traingErrMssageCn}
			, CHG_USER_ID = #{chgUserId} 
			, CHG_DT = now()
		where lrn_excn_sn = #{lrnExcnSn}
	</update>
	

		

	<!-- 학습 이력 조회 -->
	<!-- 
	<sql id="where_selectLearningHistList">
		and t2.del_yn = 'N'
		<if test="lrnNm != '' and lrnNm != null ">
			and t2.lrn_nm like concat('%',#{lrnNm}, '%')
		</if>
		<if test="lrnGroupSn != '' and lrnGroupSn != null ">
			and t2.lrn_group_sn = #{lrnGroupSn}
		</if>
	</sql>
	<select id="selectLearningHistList" resultType="sangsMap" parameterType="map">
		select 
			t1.lrn_excn_sn
			, t1.lrn_sn
			, t2.lrn_group_sn
			, t2.lrn_nm
			, t2.lrn_step_cd
			, t3.trgt_traing_data_cnt
			, DATE_FORMAT(t3.traing_bgng_dt, '%Y-%m-%d %H:%i:%s') as traing_bgng_dt
			, DATE_FORMAT(t3.traing_end_dt, '%Y-%m-%d %H:%i:%s') as traing_end_dt
			, t3.traing_sttus_cd
			, t4.lrn_dataset_nm
			, t5.trgt_test_data_cnt
			, t5.accrcy_rate
			, (select t0.data_flpth from ML_DATASET t0 where t0.dataset_sn = t4.dataset_sn) as train_data_flpth
		from ML_LRN_EXECUT t1
			, ML_LRN t2
			, ML_TRAING_HIST t3
			, ML_LRN_DATASET t4
			, ML_TEST_HIST t5
		where t1.lrn_sn = t2.lrn_sn
			and t1.lrn_excn_sn = t3.lrn_excn_sn
			and t3.lrn_dataset_sn = t4.lrn_dataset_sn
			and t1.lrn_excn_sn = t5.lrn_excn_sn
			<include refid="where_selectLearningHistList" />
		order by t1.lrn_excn_sn desc	
		limit #{pageSize} offset #{offset}
	</select>
	 -->
	
	
	<!-- 학습 이력 카운트 조회 
	<select id="selectLearningHistListCnt" resultType="Integer" parameterType="map">
		select 
			count(*) as count
		from ML_LRN_EXECUT t1
			, ML_LRN t2
			, ML_TRAING_HIST t3
			, ML_LRN_DATASET t4
			, ML_TEST_HIST t5
		where t1.lrn_sn = t2.lrn_sn
			and t1.lrn_excn_sn = t3.lrn_excn_sn
			and t3.lrn_dataset_sn = t4.lrn_dataset_sn
			and t1.lrn_excn_sn = t5.lrn_excn_sn
			<include refid="where_selectLearningHistList" />
	</select>
	-->
	
	
	
	<!-- 모델훈련목록 조회 -->
	<sql id="where_selectModelTrainList">
		and t1.del_yn = 'N'
		<if test="lrnGroupSn != '' and lrnGroupSn != null ">
			and t1.LRN_GROUP_SN = #{lrnGroupSn}
		</if>
		<if test="lrnNm != '' and lrnNm != null ">
			and t1.LRN_NM like concat('%', #{lrnNm}, '%')
		</if>
	</sql>
	<select id="selectModelTrainList" resultType="sangsMap" parameterType="map">
		select
			t1.LRN_SN
			, t2.LRN_GROUP_NM
			, t1.LRN_NM
			, (
				select COUNT(*) 
				from ML_LRN_EXECUT t01 
					, ML_TRAING_HIST t02
				where t01.lrn_excn_sn = t02.lrn_excn_sn
					and t01.lrn_step_cd = 'TRAINING'
					and t02.traing_sttus_cd != 'TEMP_SAVED'
					and t01.LRN_SN = t1.LRN_SN 
			) as execute_cnt
			, (
				select ROUND(AVG(t02.ACCRCY_RATE), 4) * 100
				from ML_LRN_EXECUT t01
					, ML_TEST_HIST t02 
					, ML_TRAING_HIST t03
				where t01.lrn_step_cd = 'TRAINING' 
					and t01.lrn_excn_sn = t02.lrn_excn_sn
					and t01.lrn_excn_sn = t03.lrn_excn_sn
					and t01.LRN_SN = t1.LRN_SN
			) as avg_accrcy_rate
			, (
				select ROUND(t02.ACCRCY_RATE, 4) * 100
				from ML_LRN_EXECUT t01
					, ML_TEST_HIST t02 
				where t01.lrn_step_cd = 'TRAINING' 
					and t01.lrn_excn_sn = t02.lrn_excn_sn 
					and t01.LRN_SN = t1.LRN_SN 
					and (t02.lrn_excn_sn, t02.TEST_HIST_SN) = (
											select t002.lrn_excn_sn, t002.TEST_HIST_SN 
											from ML_LRN_EXECUT t001
												, ML_TEST_HIST t002
												, ML_TRAING_HIST t003
											where t001.lrn_step_cd = 'TRAINING' 
												and t001.lrn_excn_sn = t002.lrn_excn_sn 
												and t001.lrn_excn_sn = t003.lrn_excn_sn
												and t003.traing_sttus_cd != 'TEMP_SAVED'
												and t001.LRN_SN = t1.LRN_SN
											order by t002.REG_DT DESC , t002.LRN_EXCN_SN DESC, t002.TEST_HIST_SN DESC
											limit 1
											) 
			) as last_accrcy_rate
			, DATE_FORMAT((
					select t01.lrn_excn_bgng_dt 
					from ML_LRN_EXECUT t01 
						, ML_TRAING_HIST t02
					where t01.lrn_excn_sn = t02.lrn_excn_sn
						and t01.lrn_step_cd = 'TRAINING'
						and t02.traing_sttus_cd != 'TEMP_SAVED'
						and t01.LRN_SN = t1.LRN_SN 
						and t01.lrn_excn_sn = (
												select max(t001.lrn_excn_sn) 
												from ML_LRN_EXECUT t001 
													, ML_TRAING_HIST t002
												where t001.lrn_excn_sn = t002.lrn_excn_sn
													and t001.lrn_step_cd = 'TRAINING' 
													and t002.traing_sttus_cd != 'TEMP_SAVED'
													and t001.LRN_SN = t1.LRN_SN)
												), '%Y-%m-%d %H:%i:%s') as last_learning_dt
			, (
				select AVG(TIMESTAMPDIFF(SECOND, lrn_excn_bgng_dt, lrn_excn_end_dt)) 
				from ML_LRN_EXECUT t01 
					, ML_TRAING_HIST t02
				where t01.lrn_excn_sn = t02.lrn_excn_sn
					and t01.lrn_step_cd = 'TRAINING'
					and t02.traing_sttus_cd != 'TEMP_SAVED'
					and t01.LRN_SN = t1.LRN_SN
			) as avg_diff_second
			, (select max(t0.lrn_excn_sn) as lrn_excn_sn from ML_LRN_EXECUT t0 where t0.lrn_step_cd = 'TRAINING' and t0.LRN_SN = t1.LRN_SN) as max_lrn_excn_sn
		from ML_LRN t1
			, ML_LRN_GROUP t2
		where t1.LRN_GROUP_SN = t2.LRN_GROUP_SN
		<include refid="where_selectModelTrainList" />
		order by t1.LRN_SN desc
		limit #{pageSize} offset #{offset}
	</select>
	<select id="selectModelTrainListCnt" resultType="Integer" parameterType="map">
		select
			COUNT(*) as count
		from ML_LRN t1
			, ML_LRN_GROUP t2
		where t1.LRN_GROUP_SN = t2.LRN_GROUP_SN
		<include refid="where_selectModelTrainList" />
	</select>
	
	<!-- 학습정보 조회 -->
	<select id="selectLearningInfo" resultType="sangsMap" parameterType="map">
		select 
			t1.LRN_SN
			, t1.LRN_GROUP_SN
			, t2.LRN_GROUP_NM
			, t1.LRN_NM
			, t1.LRN_DC
			, t1.REG_USER_ID
			, DATE_FORMAT(t1.REG_DT, '%Y-%m-%d %H:%i:%s') as REG_DT
			, t1.CHG_USER_ID
			, DATE_FORMAT(t1.CHG_DT, '%Y-%m-%d %H:%i:%s') as CHG_DT
		from ML_LRN t1
			, ML_LRN_GROUP t2
		where t1.LRN_GROUP_SN = t2.LRN_GROUP_SN
			and t1.del_yn = 'N'
			and t1.LRN_SN = #{lrnSn}
	</select>

	
	
	<!-- 학습실행적용데이터셋조회 -->
	<select id="selectLearningExcnAplcnDatasetList" resultType="sangsMap" parameterType="map">
		select
			'TRAIN' as dataset_type
			, t1.lrn_excn_sn
			, t2.LRN_DATASET_SN
			, t3.DATASET_SN
			, t4.DATASET_NM
			, t4.DATA_ROW_CNT
			, t4.data_col_cnt
			, t4.DATA_FLPTH
			, t4.data_orginl_flpth
			, t4.DATA_KB_SIZE
			, '' as result_flpth
		from ML_LRN_EXECUT t1
			, ML_TRAING_HIST t2
			, ML_LRN_DATASET t3
			, ML_DATASET t4
		where t1.lrn_excn_sn = #{lrnExcnSn}
			and t1.lrn_excn_sn = t2.lrn_excn_sn
			and t2.LRN_DATASET_SN = t3.LRN_DATASET_SN
			and t3.DATASET_SN = t4.DATASET_SN
		union 
		select
			'TEST' as dataset_type
			, t1.lrn_excn_sn
			, t2.LRN_DATASET_SN
			, t3.DATASET_SN
			, t4.DATASET_NM
			, t4.DATA_ROW_CNT
			, t4.data_col_cnt
			, t4.DATA_FLPTH
			, t4.data_orginl_flpth
			, t4.DATA_KB_SIZE
			, t2.RESULT_FLPTH  as result_flpth
		from ML_LRN_EXECUT t1
			, ML_TEST_HIST t2
			, ML_LRN_DATASET t3
			, ML_DATASET t4
		where t1.lrn_excn_sn = #{lrnExcnSn}
			and t1.lrn_excn_sn = t2.lrn_excn_sn
			and t2.LRN_DATASET_SN = t3.LRN_DATASET_SN
			and t3.DATASET_SN = t4.DATASET_SN
	</select>
	
	<!-- 학습실행적용모듈목록조회 -->
	<select id="selectLearningExcnAplcnModuleList" resultType="sangsMap" parameterType="map">	
		select
			t1.lrn_excn_sn
			, t2.module_aplcn_sn
			, t2.module_aplcn_ty_cd
			, t3.MODULE_SN
			, t3.module_ty_cd
			, t3.lib_ty_cd
			, t3.MODULE_CLASS_NM
			, t3.MODULE_PCKAGE_NM
			, t3.MODULE_NM
			, t3.MODULE_DC
		from ML_LRN_EXECUT t1
			, ML_LRN_APPLC_MODULE t2
			, ML_LRN_MODULE t3
		where t1.lrn_excn_sn = #{lrnExcnSn}
			and t1.lrn_excn_sn = t2.lrn_excn_sn
			and t2.MODULE_SN = t3.MODULE_SN
		order by t2.module_aplcn_sn
	</select>
	
	
	<!-- 학습실행적용모듈목록파라미터조회 -->
	<select id="selectLearningExcnAplcnModuleParamList" resultType="sangsMap" parameterType="map">	
		select 
			t1.lrn_excn_sn
			, t3.module_aplcn_sn
			, t3.PARAMTR_SN
			, t3.MODULE_SN
			, t3.PARAMTR_NM
			, t3.PARAMTR_VALUE
			, t4.DFLT_VALUE
			, t4.ESNTL_PARAMTR_YN
			, t4.PERM_SCOPE_DC
		from ML_LRN_EXECUT t1
			, ML_LRN_APPLC_MODULE t2
			, ML_LRN_APPLC_MODULE_PARAMTR t3
			, ML_LRN_MODULE_PARAMTR t4
		where t1.lrn_excn_sn = #{lrnExcnSn}
			and t1.lrn_excn_sn = t2.lrn_excn_sn
			and t2.lrn_excn_sn = t3.lrn_excn_sn
			and t2.module_aplcn_sn = t3.module_aplcn_sn
			and t2.MODULE_SN = t3.MODULE_SN
			and t3.MODULE_SN = t4.MODULE_SN
			and t3.PARAMTR_NM = t4.PARAMTR_NM
		order by t2.module_aplcn_sn, t3.PARAMTR_SN
	</select>
	
	
	<!-- 모델훈련이력조회 -->
	<sql id="where_selectModelTrainHistList">
		and t2.del_yn = 'N'
		and t1.lrn_step_cd = 'TRAINING'
		and t3.traing_sttus_cd != 'TEMP_SAVED'
		<if test="lrnGroupSn != '' and lrnGroupSn != null ">
			and t2.LRN_GROUP_SN = #{lrnGroupSn}
		</if>
		<if test="lrnNm != '' and lrnNm != null ">
			and t2.LRN_NM like concat('%', #{lrnNm}, '%')
		</if>
		<if test="beginDtFrom != '' and beginDtFrom != null ">
			and lrn_excn_bgng_dt between TIMESTAMP(concat(#{beginDtFrom}, '000000')) and TIMESTAMP(concat(#{beginDtTo}, '235959'))
		</if>
		
	</sql>
	<select id="selectModelTrainHistList" resultType="sangsMap" parameterType="map">
		select 
			lrn_excn_sn
			, LRN_SN
			, LRN_GROUP_SN
			, lrn_excn_bgng_dt
			, lrn_excn_end_dt
			, LRN_NM
			, LRN_GROUP_NM
			, TEST_END_DT
			, traing_sttus_cd
			, fn_get_cmmn_code_nm('LRNSTTS', traing_sttus_cd) as traing_sttus_cd_NM
			, DIFF_SECOND
			, ACCRCY_RATE
			, RESULT_FLPTH
			, crt_model_flpth
		from (
			select 
				t1.lrn_excn_sn
				, t1.LRN_SN
				, t2.LRN_GROUP_SN
				, DATE_FORMAT(t1.lrn_excn_bgng_dt, '%Y-%m-%d %H:%i:%s') as lrn_excn_bgng_dt
				, DATE_FORMAT(t1.lrn_excn_end_dt, '%Y-%m-%d %H:%i:%s') as lrn_excn_end_dt
				, t2.LRN_NM
				, (select LRN_GROUP_NM from ML_LRN_GROUP t0 where t0.LRN_GROUP_SN = t2.LRN_GROUP_SN) as LRN_GROUP_NM
				, t4.TEST_END_DT
				, case when t3.traing_sttus_cd = 'COMPLETE' and t4.TEST_END_DT is not null then 'COMPLETE'
					when t3.traing_sttus_cd = 'COMPLETE' and t4.TEST_END_DT is null then 'ING'
					else t3.traing_sttus_cd end as traing_sttus_cd  
				, TIMESTAMPDIFF(SECOND, t1.lrn_excn_bgng_dt, t1.lrn_excn_end_dt) as DIFF_SECOND
				, (ROUND(t4.ACCRCY_RATE, 4) * 100) as ACCRCY_RATE
				, t4.RESULT_FLPTH
				, t1.crt_model_flpth
			from ML_LRN_EXECUT t1
				left outer join ML_TRAING_HIST t3 on t1.lrn_excn_sn = t3.lrn_excn_sn
				left outer join ML_TEST_HIST t4 on t1.lrn_excn_sn = t4.lrn_excn_sn
				, ML_LRN t2
			where t1.LRN_SN = t2.LRN_SN
			<include refid="where_selectModelTrainHistList" />
		) t
		order by lrn_excn_sn desc 
		limit #{pageSize} offset #{offset}
	</select>
	<select id="selectModelTrainHistListCnt" resultType="Integer" parameterType="map">
		select 
			count(*) as count
		from ML_LRN_EXECUT t1
			left outer join ML_TRAING_HIST t3 on t1.lrn_excn_sn = t3.lrn_excn_sn
			left outer join ML_TEST_HIST t4 on t1.lrn_excn_sn = t4.lrn_excn_sn
			, ML_LRN t2
		where t1.LRN_SN = t2.LRN_SN
		<include refid="where_selectModelTrainHistList" />
	</select>
	
	
	<!-- 학습그룹 등록 -->
	<insert id="insertLearningGroupInfo" parameterType="map">
		insert into ML_LRN_GROUP(
			LRN_GROUP_SN
			, LRN_GROUP_NM
			, del_yn
			, REG_USER_ID
			, REG_DT
			, CHG_USER_ID
			, CHG_DT)
		values(
			(select ifnull(max(t1.LRN_GROUP_SN), 0) + 1 from ML_LRN_GROUP t1)
			, #{lrnGroupNm}
			, #{delYn}
			, #{regUserId}
			, now()
			, #{regUserId}
			, now())
	</insert>
	
	
	<!-- 학습그룹 수정 -->
	<update id="updateLearningGroupInfo" parameterType="map">
		update ML_LRN_GROUP set 
			LRN_GROUP_NM = #{lrnGroupNm}
			, CHG_USER_ID = #{chgUserId}
			, CHG_DT = now()
		where LRN_GROUP_SN = #{lrnGroupSn} 
	</update>
	
	
	
	<!-- 학습그룹 삭제 -->
	<delete id="deleteLearningGroupInfo" parameterType="map">
		update ML_LRN_GROUP set
			del_yn = 'Y'
		where LRN_GROUP_SN = #{lrnGroupSn}
	</delete>
	
	
	
	<!-- 학습 목록 조회 -->
	<select id="selectLearningList" resultType="sangsMap" parameterType="map">
		select
			t1.LRN_SN
			, t1.LRN_GROUP_SN
			, t1.LRN_NM
			, t1.LRN_DC
			, t2.LRN_GROUP_NM
		from ML_LRN t1
			, ML_LRN_GROUP t2
		where t1.LRN_GROUP_SN = t2.LRN_GROUP_SN
			and t1.del_yn = 'N'
		order by LRN_SN desc
	</select>
	
	
	<!-- 학습 목록 수정  -->
	<update id="updateLearningInfo" parameterType="map">
		update ML_LRN set
			LRN_NM = #{lrnNm}
			, LRN_DC = #{lrnDc}
			, LRN_GROUP_SN = #{lrnGroupSn}
			, CHG_USER_ID = #{chgUserId}
			, CHG_DT = now()
		where LRN_SN = #{lrnSn}
	</update>
	
	
	<!-- 학습 목록 삭제 -->
	<delete id="deleteLearningInfo" parameterType="map">
		update ML_LRN set
			del_yn = 'Y'
		where LRN_SN = #{lrnSn}
	</delete>
	
	
	
	
	<!-- 모델테스트이력조회 -->
	<sql id="where_selectModelTestList">
		and t1.lrn_step_cd = 'PUBLISHED'
		and t2.del_yn = 'N'
		<if test="lrnGroupSn != '' and lrnGroupSn != null ">
			and t2.LRN_GROUP_SN = #{lrnGroupSn}
		</if>
		<if test="lrnNm != '' and lrnNm != null ">
			and t2.LRN_NM like concat('%', #{lrnNm}, '%')
		</if>
	</sql>
	<select id="selectModelTestList" resultType="sangsMap" parameterType="map">
		select 
			t1.lrn_excn_sn
			, t1.crt_model_flpth
			, t1.ULD_MODEL_YN
			, t2.LRN_SN
			, t2.LRN_NM
			, t3.LRN_GROUP_SN
			, t3.LRN_GROUP_NM
			, fn_get_cmmn_code_nm('LRNSTEP', t1.lrn_step_cd) as lrn_step_cd_NM
			, (select COUNT(*) from ML_TEST_HIST t0 where t0.lrn_excn_sn = t1.lrn_excn_sn ) as execute_cnt
			, (select ROUND(AVG(t0.ACCRCY_RATE), 4) * 100 from ML_TEST_HIST t0 where t0.lrn_excn_sn = t1.lrn_excn_sn) as avg_accrcy_rate
			, (
				select 
					ROUND(t0.ACCRCY_RATE, 4) * 100  
				from ML_TEST_HIST t0 
				where t0.lrn_excn_sn = t1.lrn_excn_sn 
					and t0.TEST_HIST_SN = (select max(TEST_HIST_SN) from ML_TEST_HIST t01 where t01.lrn_excn_sn = t1.lrn_excn_sn) 
			) as last_accrcy_rate
			,  DATE_FORMAT((
				select TEST_BGNG_DT 
				from ML_TEST_HIST t0 
				where t0.lrn_excn_sn = t1.lrn_excn_sn 
					and t0.TEST_HIST_SN = (select max(TEST_HIST_SN) from ML_TEST_HIST t01 where t01.lrn_excn_sn = t1.lrn_excn_sn) 
			) , '%Y-%m-%d %H:%i:%s') as last_test_dt
			, (select ROUND(AVG(TIMESTAMPDIFF(SECOND, TEST_BGNG_DT, TEST_END_DT)), 2) from ML_TEST_HIST t0 where t0.lrn_excn_sn = t1.lrn_excn_sn) as avg_diff_second
		from ML_LRN_EXECUT t1
			, ML_LRN t2
			, ML_LRN_GROUP t3
		where t1.LRN_SN = t2.LRN_SN
			and t2.LRN_GROUP_SN = t3.LRN_GROUP_SN
			<include refid="where_selectModelTestList" />
		order by t1.lrn_excn_sn desc 
		limit #{pageSize} offset #{offset}
	</select>
	<select id="selectModelTestListCnt" resultType="Integer" parameterType="map">
		select 
			count(*) as count
		from ML_LRN_EXECUT t1
			, ML_LRN t2
			, ML_LRN_GROUP t3
		where t1.LRN_SN = t2.LRN_SN
			and t2.LRN_GROUP_SN = t3.LRN_GROUP_SN
			<include refid="where_selectModelTestList" />
	</select>
	
	<!-- 모델 테스트 이력 목록 조회 -->
	<sql id="where_selectModelTestHistList">
		and t1.lrn_step_cd = 'PUBLISHED'
		and t5.del_yn = 'N'
		<if test="lrnGroupSn != '' and lrnGroupSn != null ">
			and t5.LRN_GROUP_SN = #{lrnGroupSn}
		</if>
		<if test="lrnNm != '' and lrnNm != null ">
			and t5.LRN_NM like concat('%', #{lrnNm}, '%')
		</if>
		<if test="beginDtFrom != '' and beginDtFrom != null ">
			and t2.TEST_BGNG_DT between TIMESTAMP(concat(#{beginDtFrom}, '000000')) and TIMESTAMP(concat(#{beginDtTo}, '235959'))
		</if>
		
		
	</sql>
	<select id="selectModelTestHistList" resultType="sangsMap" parameterType="map">
		select 
			t1.lrn_excn_sn
			, t2.TEST_HIST_SN
			, DATE_FORMAT(t2.TEST_BGNG_DT, '%Y-%m-%d %H:%i:%s') as TEST_BEGIN_DT
			, DATE_FORMAT(t2.TEST_END_DT, '%Y-%m-%d %H:%i:%s') as TEST_END_DT
			, (ROUND(t2.ACCRCY_RATE, 4) * 100) as ACCRCY_RATE
			, TIMESTAMPDIFF(SECOND, t2.TEST_BGNG_DT, t2.TEST_END_DT) as diff_second
			, t2.REG_USER_ID
			, t3.LRN_DATASET_NM
			, t3.LRN_DATASET_SN
			, t3.DATASET_SN
			, t4.DATA_ROW_CNT
			, t5.LRN_NM
			, t6.LRN_GROUP_NM
			, fn_get_cmmn_code_nm('LRNSTTS', (
				case when t2.TEST_BGNG_DT is not null and t2.TEST_END_DT is not null and t2.test_err_mssage_cn is null and t2.ACCRCY_RATE is not null then 'COMPLETE'
					when t2.TEST_BGNG_DT is not null and t2.TEST_END_DT is null and t2.test_err_mssage_cn is null then 'ING'
					when t2.TEST_BGNG_DT is not null and t2.test_err_mssage_cn is not null then 'FAIL'
					else '' end
			)) as status_nm
		from ML_LRN_EXECUT t1
			, ML_TEST_HIST t2
			, ML_LRN_DATASET t3
			, ML_DATASET t4
			, ML_LRN t5
			, ML_LRN_GROUP t6
		where t1.lrn_excn_sn = t2.lrn_excn_sn
			and t2.LRN_DATASET_SN = t3.LRN_DATASET_SN
			and t3.DATASET_SN = t4.DATASET_SN
			and t1.LRN_SN = t5.LRN_SN
			and t5.LRN_GROUP_SN = t6.LRN_GROUP_SN
			<include refid="where_selectModelTestHistList" />
		order by t1.lrn_excn_sn desc ,  t2.TEST_HIST_SN desc
		limit #{pageSize} offset #{offset}
	</select>
	<select id="selectModelTestHistListCnt" resultType="Integer" parameterType="map">
		select 
			count(*) as cnt
		from ML_LRN_EXECUT t1
			, ML_TEST_HIST t2
			, ML_LRN_DATASET t3
			, ML_DATASET t4
			, ML_LRN t5
			, ML_LRN_GROUP t6
		where t1.lrn_excn_sn = t2.lrn_excn_sn
			and t2.LRN_DATASET_SN = t3.LRN_DATASET_SN
			and t3.DATASET_SN = t4.DATASET_SN
			and t1.LRN_SN = t5.LRN_SN
			and t5.LRN_GROUP_SN = t6.LRN_GROUP_SN
			<include refid="where_selectModelTestHistList" />
	</select>
	

	
	<!-- 학습데이터 순번 채번 -->
	<select id="selectNextLearningDatasetSn" resultType="Integer" parameterType="map">
		select 
			ifnull(max(lrn_dataset_sn), 0) + 1
		from ML_LRN_DATASET
	</select>
	
	
	
	
	<!-- 업로드모델 정보 등록 -->
	<insert id="insertUploadModelInfo" parameterType="map">
		INSERT INTO ML_ULD_MODEL_INFO(
			LRN_EXCN_SN
			, LRN_DATASET_SN
			, TEST_EXCN_FLPTH)
		VALUES(
			#{lrnExcnSn}
			, #{lrnDatasetSn}
			, #{testExcnFlpth})
	</insert>
	
	
	
	<!-- 업로드모델 여부 조회 -->
	<select id="selectUldModelInfo" resultType="sangsMap" parameterType="map">
		SELECT LRN_EXCN_SN
			, ULD_MODEL_YN
			, TRAING_LRN_EXCN_SN
		FROM ML_LRN_EXECUT
		WHERE LRN_EXCN_SN = #{lrnExcnSn};
	</select>
	
	
	<!-- 업로드모델 실행 정보 조회 -->
	<select id="selectUldModelExcnInfo" resultType="sangsMap" parameterType="map">
		SELECT t1.LRN_NM
			, t1.LRN_SN
			, t1.LRN_GROUP_SN
			, t1.REG_USER_ID
			, t2.LRN_EXCN_SN
			, t2.LRN_STEP_CD
			, t2.ULD_MODEL_YN
			, t2.TRAING_LRN_EXCN_SN
			, t2.CRT_MODEL_FLPTH
			, t3.TEST_EXCN_FLPTH
			, t3.LRN_DATASET_SN
			, t4.LRN_DATASET_NM
			, t4.LRN_DATASET_DC
			, t4.EXCL_ROW_CNT
			, IFNULL((SELECT t0.TEST_HIST_SN
					  FROM ML_TEST_HIST t0
					  WHERE t0.LRN_EXCN_SN = #{lrnExcnSn}
					  <choose>
					  	  <when test="testHistSn != null and testHistSn != '' ">
					  	  	  AND t0.TEST_HIST_SN = #{testHistSn}
					  	  </when>
					  	  <otherwise>
					  	  	  AND t0.TEST_HIST_SN = 1
					  	  </otherwise> 
					  </choose>
					  ), 1) AS TEST_HIST_SN
			, (select max(hder_indx) from ML_LRN_DATASET_HDER t0 where t0.lrn_dataset_sn = t3.LRN_DATASET_SN and trgt_value_yn = 'Y') as test_trget_hder_indx
			, TIMESTAMPDIFF(SECOND, t2.lrn_excn_bgng_dt, t2.lrn_excn_end_dt) as DIFF_SECOND
			, DATE_FORMAT(t2.LRN_EXCN_BGNG_DT, '%Y-%m-%d %H:%i:%s') as LRN_EXCN_BGNG_DT
		FROM ML_LRN t1
			, ML_LRN_EXECUT t2
			, ML_ULD_MODEL_INFO t3
			, ML_LRN_DATASET t4
		WHERE t1.LRN_SN = t2.LRN_SN 
		AND t2.LRN_EXCN_SN = t3.LRN_EXCN_SN
		AND t3.LRN_DATASET_SN = t4.LRN_DATASET_SN
		AND t2.LRN_EXCN_SN = #{lrnExcnSn}
		<!-- <choose>
			<when test="testHistSn != null and testHistSn != '' ">
				AND t0.TEST_HIST_SN = #{testHistSn}
			</when>
			<otherwise>
			  	AND t0.TEST_HIST_SN = 1
			</otherwise> 
		</choose> -->
	</select>
	
	
	<!-- 업로드모델 실행 정보 수정 -->
	<update id="updateUploadModelInfo" parameterType="map">
		UPDATE ML_LRN_EXECUT SET
			LRN_SN = #{lrnSn}
		WHERE LRN_EXCN_SN = #{lrnExcnSn}
	</update>
	<!-- 업로드모델 데이터셋 정보 수정 -->
	<update id="updateUploadDatasetInfo" parameterType="map">
		UPDATE ML_LRN_DATASET SET
			LRN_DATASET_NM = #{lrnDatasetNm}
			, LRN_DATASET_DC = #{lrnDatasetDc}
			, EXCL_ROW_CNT = #{exclRowCnt}
			, CHG_DT = NOW()
		WHERE LRN_DATASET_SN = #{lrnDatasetSn}
	</update>
	<!-- 업로드모델 실행 python 정보 수정 -->
	<update id="updateUploadPyInfo" parameterType="map">
		UPDATE ML_ULD_MODEL_INFO SET
			TEST_EXCN_FLPTH = #{testExcnFlpth}
		WHERE LRN_EXCN_SN = #{lrnExcnSn}
	</update>
	
</mapper>  