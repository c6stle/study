<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mlms_dataset">
 
	 
  
	<select id="selectLearningDatasetAllList" resultType="sangsMap" parameterType="map">
		select 
			t1.lrn_dataset_sn
			, t1.dataset_sn
			, t1.dataset_ty_cd
			, t1.lrn_dataset_nm
			, t1.lrn_dataset_dc
			, t2.data_row_cnt
			, t2.data_col_cnt
			, t2.data_flpth
			, t2.data_orginl_flpth
			, t2.DATA_KB_SIZE
		from ML_LRN_DATASET t1
			, ML_DATASET t2
		where t1.dataset_sn = t2.dataset_sn
			and t1.del_yn = 'N'
			and t2.del_yn = 'N'
		<if test="apiDataYn != '' and apiDataYn != null ">
			and t2.api_data_yn = #{apiDataYn}
		</if>
		order by t1.lrn_dataset_sn desc
	</select>
	
	
	
	<sql id="where_selectSourceDatasetList">
			and del_yn = 'N'
		<if test="datasetNm != '' and datasetNm != null ">
			and dataset_nm like concat('%', #{datasetNm}, '%')
		</if>
		<if test="dataOrginlFlpth != '' and dataOrginlFlpth != null ">
			and data_orginl_flpth like concat('%', #{dataOrginlFlpth}, '%')
		</if>  
		<if test="regUserId != '' and regUserId != null ">
			and REG_USER_ID like concat('%', #{regUserId}, '%')
		</if>
		<if test="apiDataYn != '' and apiDataYn != null ">
			and api_data_yn = #{apiDataYn}
		</if>
	</sql>
	<!-- 원천데이터셋 목록 조회 -->
	<select id="selectSourceDatasetList" resultType="sangsMap" parameterType="map">
		select 
			dataset_sn
			, dataset_nm
			, data_orginl_flpth
			, data_kb_size
			, data_col_cnt
			, data_row_cnt
			, DATE_FORMAT(REG_DT, '%Y-%m-%d %H:%i:%s') as REG_DT
			, REG_USER_ID
		from ML_DATASET
		where 1=1
		<include refid="where_selectSourceDatasetList" />
		order by dataset_sn desc
		limit #{pageSize} offset #{offset}
	</select>
	
	<!-- 원천데이터셋목록 카운트 조회 -->
	<select id="selectSourceDatasetListCnt" resultType="Integer" parameterType="map">
		select 
			count(*) as count
		from ML_DATASET
		where 1=1
		<include refid="where_selectSourceDatasetList" />
	</select>
	
	
	
	<!-- 원천데이터셋 정보 조회 -->
	<select id="selectSourceDatasetInfo" resultType="sangsMap" parameterType="map">
		select
			dataset_sn
			, dataset_nm
			, data_kb_size
			, data_col_cnt
			, data_row_cnt
			, data_flpth
			, data_orginl_flpth
			, REG_DT
			, REG_USER_ID
			, dataset_dc
			, data_origin_dc
		from ML_DATASET
		where dataset_sn = #{datasetSn}
	</select>
	
	
	
	<!-- 원천데이터셋 정보 수정 -->
	<update id="updateSourceDatasetInfo" parameterType="map">
		update ML_DATASET set
	 		dataset_nm = #{datasetNm}
	 		, dataset_dc = #{datasetDc}
	 		, data_origin_dc = #{dataOriginDc}
	 		, CHG_USER_ID = #{chgUserId}
	 		, CHG_DT = now()
	 		, del_yn = #{delYn}
	 	where dataset_sn = #{datasetSn}
	</update>
	
	 
	
	
	<!-- 원천데이터셋 정보 등록 -->
	<insert id="insertSourceDatasetInfo" parameterType="map">
		insert into ML_DATASET (
			dataset_sn    
			, dataset_nm    
			, data_origin_dc    
			, dataset_dc    
			, data_row_cnt
			, data_col_cnt
			, data_flpth
			, data_orginl_flpth
			, data_kb_size    
			, del_yn
			, api_data_yn    
			, REG_USER_ID
			, REG_DT
			, CHG_USER_ID
			, CHG_DT)
		values (
			#{datasetSn}
			, #{datasetNm}
			, #{dataOriginDc}
			, #{datasetDc}
			, #{dataRowCnt}
			, #{dataColCnt}
			, #{dataFlpth}
			, #{dataOrginlFlpth}
			, #{dataKbSize}
			, #{delYn}
			, #{apiDataYn}
			, #{regUserId}
			, now()
			, #{regUserId}
			, now())
	</insert>
	
	
	
	
	
	<sql id="where_selectLearningDatasetList">
			and t1.del_yn = 'N'
			and t2.del_yn = 'N'
		<if test="datasetTyCd != null and datasetTyCd != '' ">
			and t1.dataset_ty_cd like concat('%', #{datasetTyCd}, '%')
		</if>
		<if test="lrnDatasetNm != null and lrnDatasetNm != '' ">
			and t1.lrn_dataset_nm like concat('%', #{lrnDatasetNm}, '%')
		</if>
		<if test="dataOrginlFlpth != null and dataOrginlFlpth != '' ">
			and t2.data_orginl_flpth like concat('%', #{dataOrginlFlpth}, '%')
		</if>
		<if test="apiDataYn != '' and apiDataYn != null ">
			and t2.api_data_yn = #{apiDataYn}
		</if>
	</sql>
	<!-- 학습데이터셋 목록 조회  -->
	<select id="selectLearningDatasetList" resultType="sangsMap" parameterType="map">
		select 
			t1.lrn_dataset_sn
			, t1.lrn_dataset_nm
			, fn_get_cmmn_code_nm('DATASETTY', t1.dataset_ty_cd) as dataset_ty_cd_nm
			, t1.dataset_ty_cd
			, t2.data_orginl_flpth
			, t2.data_kb_size
			, t2.data_col_cnt
			, t2.data_row_cnt
			, t3.hder_value
			, t1.excl_row_cnt
			, DATE_FORMAT(t1.REG_DT, '%Y-%m-%d %H:%i:%s') as REG_DT
			, t1.REG_USER_ID
		from ML_LRN_DATASET t1 
			, ML_DATASET t2
			, ML_LRN_DATASET_HDER t3
		where t1.dataset_sn = t2.dataset_sn
			and t1.lrn_dataset_sn = t3.lrn_dataset_sn
			and t3.trgt_value_yn = 'Y'
		<include refid="where_selectLearningDatasetList" />
		order by t1.lrn_dataset_sn desc
		limit #{pageSize} offset #{offset}
	</select>
	
	<!-- 학습데이터셋 목록 카운트 조회  -->
	<select id="selectLearningDatasetListCnt" resultType="Integer" parameterType="map">
		select 
			count(*) as count
		from ML_LRN_DATASET t1 
			, ML_DATASET t2
			, ML_LRN_DATASET_HDER t3
		where t1.dataset_sn = t2.dataset_sn
			and t1.lrn_dataset_sn = t3.lrn_dataset_sn
			and t3.trgt_value_yn = 'Y'
		<include refid="where_selectLearningDatasetList" />
	</select>
	
	
	
	<!-- 학습 데이터셋 정보 조회 -->
	<select id="selectLearningDatasetInfo" resultType="sangsMap" parameterType="map">
		select		
			fn_get_cmmn_code_nm('DATASETTY', t1.dataset_ty_cd) as dataset_ty_cd_nm
			, t1.dataset_sn
			, t1.dataset_ty_cd
			, t1.lrn_dataset_sn
			, t1.lrn_dataset_nm
			, t1.lrn_dataset_dc
			, t1.excl_row_cnt
			, t1.del_yn
			, t2.dataset_nm
			, t2.data_row_cnt
			, t2.data_col_cnt
			, t2.data_flpth
			, t2.data_orginl_flpth
			, t2.data_kb_size
			, t2.data_origin_dc
			, t3.hder_value
			, t3.hder_indx
			, t1.REG_USER_ID
			, t1.REG_DT
		from ML_LRN_DATASET t1 
			, ML_DATASET t2
			, ML_LRN_DATASET_HDER t3
		where t1.lrn_dataset_sn = #{lrnDatasetSn}
			and t1.dataset_sn = t2.dataset_sn
			and t1.lrn_dataset_sn = t3.lrn_dataset_sn
			and t3.trgt_value_yn = 'Y'
	</select>
	
	
	
	<!-- 학습데이터셋 헤더 목록 조회 -->
	<select id="selectLearningDatasetHeaderList" resultType="sangsMap" parameterType="map">
		select
			lrn_dataset_sn
			, hder_indx
			, hder_value
			, trgt_value_yn
			, use_yn
		from ML_LRN_DATASET_HDER
		where lrn_dataset_sn = #{lrnDatasetSn}
	</select>
	
	
	<!-- 학습데이터셋 정보 등록 -->
	<insert id="insertLearningDatasetInfo" parameterType="map">
		insert into ML_LRN_DATASET (
			lrn_dataset_sn
			, dataset_sn
			, dataset_ty_cd
			, lrn_dataset_nm
			, lrn_dataset_dc
			, excl_row_cnt
			, del_yn
			, REG_USER_ID
			, REG_DT
			, CHG_USER_ID
			, CHG_DT)
		values (
			#{lrnDatasetSn}
			, #{datasetSn}
			, #{datasetTyCd}
			, #{lrnDatasetNm}
			, #{lrnDatasetDc}
			, #{exclRowCnt}
			, #{delYn}
			, #{regUserId}
			, now()
			, #{regUserId}
			, now())
	</insert>
	
	
	
	<!-- 학습데이터셋 정보 수정 -->
	<update id="updateLearningDatasetInfo" parameterType="map">
		update ML_LRN_DATASET set
	 		dataset_ty_cd = #{datasetTyCd}
	 		, lrn_dataset_nm = #{lrnDatasetNm}
	 		, lrn_dataset_dc = #{lrnDatasetDc}
	 		, excl_row_cnt = #{exclRowCnt}
	 		, del_yn = #{delYn}
	 		, CHG_USER_ID = #{chgUserId}
	 		, CHG_DT = now()
	 	where lrn_dataset_sn = #{lrnDatasetSn}
	</update>
	
	

	<!-- 데이터셋 헤더 삭제(삭제 후 등록) -->
	<delete id="deleteLearningDatasetHeaderInfo" parameterType="map">
		delete from ML_LRN_DATASET_HDER
		where lrn_dataset_sn = #{lrnDatasetSn}
	</delete>
	
	
	<!-- 데이터셋 헤더 등록 -->
	<insert id="insertLearningDatasetHeaderInfo" parameterType="map">
		insert into ML_LRN_DATASET_HDER (
			lrn_dataset_sn
			, hder_indx
			, hder_value
			, trgt_value_yn
			, use_yn
			, REG_USER_ID
			, REG_DT
			, CHG_USER_ID
			, CHG_DT)
		values (
			#{lrnDatasetSn}
			, #{hderIndx}
			, #{hderValue}
			, #{trgtValueYn}
			, #{useYn}
			, #{regUserId}
			, now()
			, #{regUserId}
			, now())
	</insert>
	
	
	<!-- 신규 원천데이터셋_순번 채번 -->
	<select id="selectNextDatasetSn" resultType="Integer">
		select
			(ifnull(max(dataset_sn), 0) + 1) as dataset_sn
		from ML_DATASET
	</select>
	
	<!-- 신규 학습데이터셋_순번 채번 -->
	<select id="selectNextLearningDatasetSn" resultType="Integer">
		select
			(ifnull(max(lrn_dataset_sn), 0) + 1) as lrn_dataset_sn
		from ML_LRN_DATASET
	</select>
	
	
	
	<!-- 학습데이터 라벨 목록조회 -->
	<select id="selectLearningDatasetLabelList" resultType="sangsMap" parameterType="map">
		select
			lbl_indx
			, lbl_value
			, lbl_nm
		from ML_LRN_DATASET_LBL
		where lrn_dataset_sn = #{lrnDatasetSn}
		order by lbl_value
	</select>

	
	<!-- 학습데이터 라벨 정보 삭제 -->
	<delete id="deleteLearningDatasetLabelInfo" parameterType="map">
		delete from ML_LRN_DATASET_LBL
		where lrn_dataset_sn = #{lrnDatasetSn}
	</delete>
	
	<!-- 학습데이터 라벨 정보 등록 -->
	<insert id="insertLearningDatasetLabelInfo" parameterType="map">
		insert into ML_LRN_DATASET_LBL(
			lrn_dataset_sn
			, lbl_indx
			, lbl_value
			, lbl_nm
			, REG_USER_ID
			, REG_DT
			, CHG_USER_ID
			, CHG_DT)
		values (
			#{lrnDatasetSn}
			, (select (ifnull(max(t1.lbl_indx) + 1, 0)) from ML_LRN_DATASET_LBL t1 where t1.lrn_dataset_sn=#{lrnDatasetSn})
			, #{lblValue}
			, #{lblNm}
			, #{regUserId}
			, now()
			, #{regUserId}
			, now())
	</insert>
	
	
	
	<!-- 데이터셋 상세(미리)보기 정보 조회 -->
	<select id="selectDatasetPreviewInfo" parameterType="map">
		select
		from ML_DATASET t1
			, ML_LRN_DATASET t2
			, ML_LRN_DATASET_HDER t3
	</select>
	
	
	
	
	<!-- 테스트 데이터셋 목록 조회 -->
	<sql id="where_selectTestDatasetList">
		and t1.del_yn = 'N'
		and t2.del_yn = 'N'
		and t1.DATASET_TY_CD in ('NONE', 'TEST')
		<if test="lrnDatasetNm != '' and lrnDatasetNm != null ">
			and t2.lrn_dataset_nm like concat('%', #{lrnDatasetNm}, '%')
		</if>
		<if test="apiDataYn != '' and apiDataYn != null ">
			and t2.api_data_yn = #{apiDataYn}
		</if>
	</sql>
	<select id="selectTestDatasetList" resultType="sangsMap" parameterType="map">
		select 
			t1.lrn_dataset_sn
			, t1.dataset_sn
			, t1.dataset_ty_cd
			, t1.lrn_dataset_nm
			, t1.lrn_dataset_dc
			, t2.data_row_cnt
			, t2.data_col_cnt
			, t2.DATA_ORGINL_FLPTH
			, t2.DATA_KB_SIZE
		from ML_LRN_DATASET t1
			, ML_DATASET t2
		where t1.dataset_sn = t2.dataset_sn
		<include refid="where_selectTestDatasetList" />
		order by t1.lrn_dataset_sn desc
		limit #{pageSize} offset #{offset}
	</select>
	<select id="selectTestDatasetListCnt" resultType="Integer" parameterType="map">
	 	select count(*) as cnt
	 	from ML_LRN_DATASET t1
			, ML_DATASET t2
		where t1.dataset_sn = t2.dataset_sn
		<include refid="where_selectTestDatasetList" />
	 </select>
	
 
	
	
	
	
</mapper>  