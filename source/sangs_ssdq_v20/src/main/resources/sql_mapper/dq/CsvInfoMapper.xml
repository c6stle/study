<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sangs.dq.mapper.CsvInfoMapper">

	
	<insert id="insertDgnssDbms" parameterType="map"> 
		<selectKey resultType="Integer" keyProperty="dbmsCnncSn" order="BEFORE">
			SELECT IFNULL(MAX(cast(DBMS_CNNC_SN as unsigned)),0)+1 AS dbmsCnncSn FROM DQ_DGNSS_DBMS 
		</selectKey>
		INSERT INTO DQ_DGNSS_DBMS 
		( 
			`INSTT_CODE`,
			`DBMS_CNNC_SN`,
			`DGNSS_DBMS_NM`,
			`DBMS_SN`,
			`DBMS_VER_ID`,
			`IP`,
			`PORT`,
			`SCHEMA`,
			`SID`,
			`DATABASE`,
			`PARAMTR`,
			`ID`,
			`PASSWORD`,
			`RM`,
			`USE_YN`,
			`REG_DT`
		)
		VALUES
		(
		 	#{prjctSn},
		 	#{dbmsCnncSn},
		 	#{dgnssDbmsNm},
		 	#{dbmsSn},
		 	#{dbmsVerId},
		 	#{ip},
		 	#{port},
		 	#{schema},
		 	#{sid},
		 	#{database},
		 	#{paramtr},
		 	#{id},
		 	#{password},
		 	#{rm},
		 	1,
		 	now()
		)
		
	</insert>
	
	<update id="createCsvTable" parameterType="map"> 
	
		CREATE TABLE ${tableName}
		( 
			${culumnInfo}
		)
		collate = `utf8_general_ci` ENGINE = InnoDB
		COMMENT 'CSV 진단대상데이터베이스정보'
		
	</update>
	
	<update id="dropCsvTable" parameterType="map">
		DROP TABLE ${tableName}
	</update>
	

	
	<insert id="mysqlimportFile" parameterType="map"> 
		LOAD DATA LOCAL INFILE #{fullFilePath} 
		INTO TABLE ${tableName} 
		CHARACTER SET UTF8
		FIELDS 
		OPTIONALLY ENCLOSED BY '"' 
		<if test='escapeCharYn == "Y"'>
			ESCAPED BY ''
		</if>
		TERMINATED BY #{delimiter} 
		<if test="osKnd != NULL">
			<if test="osKnd == 'WINDOWS'">
				LINES TERMINATED BY '\r\n' 
			</if>
			<if test="osKnd == 'UNIX'">
				LINES TERMINATED BY '\n' 
			</if>
			<if test="osKnd == 'MAC'">
				LINES TERMINATED BY '\r' 
			</if>
		</if>
		<if test="osKnd == NULL">
			LINES TERMINATED BY '\r\n' 
		</if>
		IGNORE #{titleCnt} LINES
		(
		<foreach item="columnData" separator="," collection="columnList">${columnData.column}</foreach>
		)
	</insert>
	
	
	
	<!-- 테이블 구조 분석 목록 조회 -->
	<select id="selectAnalysisTableList" resultType="sangsMap" parameterType="Map">

		select
			t1.table_name as dbms_table_nm
			, t1.avg_row_length as avg_row_len
			, t1.table_comment as comments
			, (select count(*) from INFORMATION_SCHEMA.COLUMNS t01 where t01.table_name = t1.table_name  and t01.column_key ='PRI') as pk_cnt
			, (select count(*) from INFORMATION_SCHEMA.STATISTICS t02 where t02.table_name = t1.table_name and t02.index_name != 'PRIMARY') as index_cnt
		from 
			INFORMATION_SCHEMA.TABLES t1
		where 1 = 1
		and t1.table_type = 'BASE TABLE'
		and UPPER(t1.table_schema) = UPPER(#{dbmsDatabaseNm})
		and t1.table_name = #{dbmsDatabaseCn} 
		order by t1.table_name

	</select>
	
	
	<!-- 테이블 row 데이터 count 조회 -->
	<select id="selectTableRowDataCnt" resultType="Integer" parameterType="Map">
		select count(*) from ${dbmsDatabaseNm}.${dbmsDatabaseCn}
	</select>
	
	
	<!-- 컬럼 구조 분석 목록 조회 -->
	<select id="selectAnalysisTableColumnList" resultType="sangsMap" parameterType="Map">
	 	
		select  
			t1.table_name as dbms_table_nm
			, t1.column_comment as column_name
			, t1.table_schema as dbms_database_nm
			, t1.data_type as data_type
			, t1.character_maximum_length as data_length
			, t1.numeric_precision as data_precision 
			, t1.numeric_scale as data_scale 
			, t1.is_nullable as nullable
			, t1.column_default as data_default
			, t1.column_comment as comments
		from 
			 INFORMATION_SCHEMA.COLUMNS t1 
			, INFORMATION_SCHEMA.TABLES t2
		where 1 = 1 
		and UPPER(t1.table_schema) = UPPER(#{dbmsDatabaseNm})
		and t1.table_name = #{dbmsDatabaseCn} 
		and t1.table_schema = t2.table_schema 
		and t1.table_name = t2.table_name 
		and t1.table_catalog = t2.table_catalog 
		and t2.table_type = 'BASE TABLE'
		order by t1.table_name, t1.ordinal_position
			
	</select>
	
		
	<!-- 사용자정의 SQL -->
	<select id="selectUserCheckSql" resultType="Integer" parameterType="Map">
		select 
			count(*)
		from ${dbmsDatabaseNm}.${dbmsTableNm}
		where ${whereValue}
	</select>
	
</mapper>