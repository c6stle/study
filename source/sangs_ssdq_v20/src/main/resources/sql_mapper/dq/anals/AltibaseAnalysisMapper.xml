<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Altibase.AnalysisMapper">
	
	<!-- 테이블 row 데이터 목록 조회 -->
	<select id="selectTableRowDataList" resultType="sangsMap" parameterType="map">
		select * from ${dbmsTableNm}
		limit ${rowCnt}
	</select>
	
	<!-- 테이블 row 데이터 count 조회 -->
	<select id="selectTableRowDataCnt" resultType="Integer" parameterType="Map">
		select count(*) from ${dbmsTableNm}
	</select>
	
	
	<!-- 테이블 구조 분석 목록 조회 -->
	<select id="selectAnalysisTableList" resultType="sangsMap" parameterType="Map">

		select
			t1.table_name as dbms_table_nm
			, (select t01.comments from SYSTEM_.SYS_COMMENTS_ t01 where t01.table_name = t1.table_name and t01.column_name is null) as comments
			, (select count(*) from SYSTEM_.SYS_INDICES_ t01 where t01.user_id = t2.user_id and t01.table_id = t1.table_id) as index_cnt
			, (select t01.column_cnt from SYSTEM_.SYS_CONSTRAINTS_ t01 where constraint_type='3' and t01.user_id = t2.user_id and t01.table_id = t1.table_id) as pk_cnt
		from
			SYSTEM_.SYS_TABLES_ t1
			, SYSTEM_.SYS_USERS_ t2
		where 1 = 1 
		and t2.user_name not in ('PUBLIC', 'SYSTEM_')
		and t1.user_id = t2.user_id
		order by t1.table_name
		
	</select>
	
	
	<!-- 컬럼 구조 분석 목록 조회 -->
	<select id="selectAnalysisTableColumnList" resultType="sangsMap" parameterType="Map">
		select
			t2.table_name as dbms_table_nm
			, t1.column_name 
			, t1.is_nullable as nullable
			, t1.default_val as data_default
			, t1.scale as data_scale
			, t1.precision as data_length
			, t1.precision as data_precision
			, (select t01.comments from SYSTEM_.SYS_COMMENTS_ t01 where t01.column_name = t1.column_name and t01.table_name = t2.table_name) comments
			, DECODE(t1.data_type, 1, 'CHAR', 12, 'VARCHAR', -8, 'NCHAR', -9, 'NVARCHAR', 2, 'NUMERIC/DECIMAL', 6, 'FLOAT/NUMBER', 8, 'DOUBLE', 7, 'REAL', -5, 'BIGINT', 4, 'INTEGER', 5, 'SMALLINT', 9, 'DATE', 30, 'BLOB', 40, 'CLOB', 20001, 'BYTE', 20002, 'NIBBLE', -7, 'BIT', -100, 'VARBIT', 10003, 'GEOMETRY') as data_type
		from
			SYSTEM_.SYS_COLUMNS_ t1
			, SYSTEM_.SYS_TABLES_ t2
			, SYSTEM_.SYS_USERS_ t3
		where 1 = 1 
		and t3.user_name not in ('PUBLIC', 'SYSTEM_')
		and t1.table_id = t2.table_id
		and t3.user_id = t2.user_id
	<if test="dbmsTableNm != '' and dbmsTableNm != null ">
		and upper(t2.table_name) = upper(#{dbmsTableNm})
	</if>		
		order by t2.table_name, t1.column_order
			
	</select>
	
	<!-- 컬럼별 최댓값 and 최솟값 조회 -->
	<select id="selectAnalysisColumnsMaxAndMinValue" resultType="map" parameterType="map">
		select
			${columnNm}
		from ${dbmsTableNm}
	</select>
	
	
	<!-- 컬럼별 데이터 조회(limit) -->
	<select id="selectAnalysisColumnValueWithLimit" resultType="map" parameterType="map">
		select
			${columnName} as col_val
		from ${dbmsTableNm}
		<if test="limitCount != '' and limitCount != null">
		limit ${limitCount}
		</if>
	</select>
	
	
	<!-- 사용자정의 SQL -->
	<select id="selectUserCheckSql" resultType="Integer" parameterType="Map">
		select 
			count(*)
		from ${dbmsTableNm}
		where ${whereValue}
	</select>
	
	
	<!-- 라이프사이클 분석 컬럼 MtchgCnt -->
	<select id="selectLifecycleAnalysisMtchgCnt" parameterType="map" resultType="Integer">
		select 
			count(*)
		from
			(
			select 
				${columnNm}
			from ${dbmsTableNm}
			where ${columnNm} is not null
			) t1
		${whereParam}<![CDATA[>=]]>#{chkDate}
	</select>
	
	<!-- 라이프사이클 분석 컬럼 missCnt -->
	<select id="selectLifecycleAnalysisMissCnt" parameterType="map" resultType="Integer">
		select 
			count(*)
		from
			(
			select 
				${columnNm}
			from ${dbmsTableNm}
			where ${columnNm} is not null
			) t1
		${whereParam}<![CDATA[<]]>#{chkDate}
		
	</select>	
	
	
	<!-- 테이블 row 데이터 count 조회 -->
	<select id="selectDgnssDataRowCnt" resultType="Integer" parameterType="map">
		select count(*) from ${tblNm}
		where 1 = 1
		<if test="dataCndValue != '' and dataCndValue != null">
			<include refid="where_datacndvalue"/>
		</if>
	</select>
	
	
	<!-- 진단 Unique Count 결과 목록 -->
	<select id="selectDgnssUniqueCnt" resultType="Integer" parameterType="map">
		select count(*) as cnt 
		from(
			select count(*) 
			from ${tblNm}
			where 1 = 1
			<if test="dataCndValue != '' and dataCndValue != null">
				<include refid="where_datacndvalue"/>
			</if>			
			group by ${colNm}
			having count(*) = 1
		) t1
	</select>
	
	<!-- 진단 Duplicate Count 결과 목록 -->
	<select id="selectDgnssDuplicateCnt" resultType="Integer" parameterType="map">
		select coalesce(sum(t1.cnt), 0)
		from (
			select 
				${colNm}
				, count(*) as cnt
			from
				${tblNm}
			where
				${colNm} is not null
				<if test="dataCndValue != '' and dataCndValue != null">
					<include refid="where_datacndvalue"/>
				</if>				
			group by ${colNm}
			having count(*) > 1 
		) t1
	</select>
	
	<!-- 진단 Distinct Count 결과 목록 -->
	<select id="selectDgnssDistinctCnt" resultType="Integer" parameterType="map">
		select count(*) as cnt 
		from (
			select
				distinct ${colNm}
			from ${tblNm}
			where 1 = 1
			<if test="dataCndValue != '' and dataCndValue != null">
				<include refid="where_datacndvalue"/>
			</if>
		) t1
	</select>
	
	<!-- 진단 NULL Count 결과 목록 -->
	<select id="selectDgnssNullCnt" resultType="Integer" parameterType="map">
		select count(*) as cnt
		from ${tblNm}
		where ${colNm} is null
		<if test="dataCndValue != '' and dataCndValue != null">
			<include refid="where_datacndvalue"/>
		</if>
	</select>
	
	<!-- 진단 Blank Count 결과 목록 -->
	<select id="selectDgnssBlankCnt" resultType="Integer" parameterType="map">
		select count(*)	as cnt
		from ${tblNm}
		where trim(${colNm}) = ''
		and ${colNm} is not null
		<if test="dataCndValue != '' and dataCndValue != null">
			<include refid="where_datacndvalue"/>
		</if>
	</select>
	
	<!-- 진단 빈도 결과 목록 -->
	<select id="selectDgnssFqResultList" resultType="sangsMap" parameterType="map">
		select t1.data_value
			, t1.data_cnt
		from(
			select
				rownum as rnum
				, t01.*
			from (
				select
					substring(${colNm}, 1, 50) as data_value
					, count(*) as data_cnt
				from ${tblNm}
				where 1 = 1
				<if test="dataCndValue != '' and dataCndValue != null">
					<include refid="where_datacndvalue"/>
				</if>
				group by ${colNm}
				order by data_cnt desc 
				) t01 
			) t1
		where t1.rnum between 1 and 10		
	</select>
	
	<!-- 컬럼 초과 데이터 목록 조회 -->
	<select id="selectDgnssColExcessDataList" resultType="sangsMap" parameterType="map">
		select 
			${colNm}
			<foreach item="pkColNm" open="," separator="," collection="pkColNmArr">${pkColNm}</foreach>
		from
			(
			select 
				*
			from (
				select
					rownum as rnum
					, t001.*
				from
					${tblNm} t001
				where 1 = 1
				<if test='nullDataDgnssYn == "N"'>
				and t001.${colNm} is not null
				</if>
				<if test="dataCndValue != '' and dataCndValue != null">
					<include refid="where_datacndvalue"/>
				</if>
				) t01
			order by t01.rnum
			) t1
		where t1.rnum between ${startRow} and ${endRow}
	</select>
	
	<!-- 컬럼 데이터 목록 조회 -->
	<select id="selectDgnssColDataList" resultType="sangsMap" parameterType="map">
		select ${colNm}
		<foreach item="pkColNm" open="," separator="," collection="pkColNmArr">${pkColNm}</foreach>
		from ${tblNm}
		where 1 = 1
		<if test='nullDataDgnssYn == "N"'>
		and ${colNm} is not null
		</if>
		<if test="dataCndValue != '' and dataCndValue != null">
			<include refid="where_datacndvalue"/>
		</if>
	</select>
	
	<!-- 사용자 정의 SQL 일치 목록 -->
	<select id="selectDgnssUserDfnSqlMtchList" resultType="sangsMap" parameterType="map">
		${ruleExprsnValue}
		<if test="dataCndValue != '' and dataCndValue != null">
			<include refid="where_datacndvalue"/>
		</if>		
	</select>
	
	<!-- 사용자 정의 SQL 불일치 목록-->
	<select id="selectDgnssUserDfnSqlDisMtchList" resultType="sangsMap" parameterType="map">
		select ${colNm}
		<foreach item="pkColNm" open="," separator="," collection="pkColNmArr">${pkColNm}</foreach>
		from ${tblNm} 
		where ${colNm} not in (
			${ruleExprsnValue}
		)
		<if test="dataCndValue != '' and dataCndValue != null">
			<include refid="where_datacndvalue"/>
		</if>
	</select>
	
	
	<!-- 숫자 일치 범주 -->
	<select id="selectDgnssNumberCtgryMtchList" resultType="sangsMap" parameterType="map">
		select
			${colNm}
		from ${tblNm}
		where ${colNm} between ${bgngValue} and ${endValue}
		<if test="dataCndValue != '' and dataCndValue != null">
			<include refid="where_datacndvalue"/>
		</if>
	</select>
	
	<!-- 숫자 불일치 범주 -->
	<select id="selectDgnssNumberCtgryDisMtchList" resultType="sangsMap" parameterType="map">
		select
			${colNm}
			<foreach item="pkColNm" open="," separator="," collection="pkColNmArr">${pkColNm}</foreach>
		from ${tblNm}
		where ${colNm} not between ${bgngValue} and ${endValue}
		<if test="dataCndValue != '' and dataCndValue != null">
			<include refid="where_datacndvalue"/>
		</if>		
	</select>
	
	<!-- 문자 일치 범주 -->
	<select id="selectDgnssChrctrCtgryMtchList" resultType="sangsMap" parameterType="map">
		select
			${colNm}
		from ${tblNm}
		where ${colNm} between #{bgngValue} and #{endValue}
		<if test="dataCndValue != '' and dataCndValue != null">
			<include refid="where_datacndvalue"/>
		</if>		
	</select>
	
	<!-- 문자 불일치 범주 -->
	<select id="selectDgnssChrctrCtgryDisMtchList" resultType="sangsMap" parameterType="map">
		select
			${colNm}
			<foreach item="pkColNm" open="," separator="," collection="pkColNmArr">${pkColNm}</foreach>
		from ${tblNm}
		where ${colNm} not between #{bgngValue} and #{endValue}
		<if test="dataCndValue != '' and dataCndValue != null">
			<include refid="where_datacndvalue"/>
		</if>		
	</select>
	
	
	
	
<!-- 	날짜 범주
	<select id="selectDgnssDateCtgryCnt" resultType="sangsMap" parameterType="map">
		select
			count(*)
		from ${schemaNm}."${tblNm}"
		where to_char(${colNm},'YYYY-MM-DD') <![CDATA[>=]]> #{bgngValue} and to_char(${colNm},'YYYY-MM-DD') <![CDATA[<=]]> #{endValue}
	</select> -->
	
	
	
	<!-- 날짜 일치 범주 -->
	<select id="selectDgnssDateCtgryMtchList" resultType="sangsMap" parameterType="map">
		select
			${colNm}
		from ${tblNm}
		where to_char(${colNm},'YYYY-MM-DD') between #{bgngValue} and #{endValue}
		<if test="dataCndValue != '' and dataCndValue != null">
			<include refid="where_datacndvalue"/>
		</if>
	</select>
	
	<!-- 날짜 불일치 범주 -->
	<select id="selectDgnssDateCtgryDisMtchList" resultType="sangsMap" parameterType="map">
		select
			${colNm}
			<foreach item="pkColNm" open="," separator="," collection="pkColNmArr">${pkColNm}</foreach>
		from ${tblNm}
		where to_char(${colNm},'YYYY-MM-DD') not between #{bgngValue} and #{endValue}
		<if test="dataCndValue != '' and dataCndValue != null">
			<include refid="where_datacndvalue"/>
		</if>		
	</select>
	
	<!-- pk 목록 조회 -->
	<select id="sealectPkColList" resultType="sangsMap" parameterType="map">

	</select>
	
	<sql id="where_datacndvalue">
	 	and ${dataCndValue}
	</sql>
	
</mapper>
