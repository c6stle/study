<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sangs.dq.mapper.CommonMapper">
	
	<!-- 등록된 사용자 건수 조회 -->
	<select id="selectInsttCnt" resultType="int">
		SELECT 
			COUNT(*)
		FROM DQ_USER_INFO
	</select>

	<insert id="insertUserInfo" parameterType="map">
		INSERT INTO DQ_USER_INFO
		(
			INSTT_CODE
			, AUTHOR_CODE 
			, USER_ID 
			, USER_PASSWORD 
			, USER_NM 
			, CHRG_DEPT
			, RECENT_CONECT_DT
			, RECENT_CONECT_IP
			, RM
			, USE_YN
		)
		VALUES
		(
			#{prjctSn}
			, #{authorCode} 
			, #{userId}
			, #{userPw}
			, #{userNm} 
			, #{lwprtInsttNm}
			, now()
			, #{recentConectIp}
			, ''
			, IF(#{useYn } = 'Y', 1, 0)
		)
	</insert>
	
	<select id="selectManageInsttList" parameterType="map" resultType="map">
		SELECT 
		    INSTT_CODE AS prjctSn
			, INSTT_NM AS insttNm
			, DATE_FORMAT(BSNS_BGNDE, '%Y-%m-%d') AS bsnsBgnde
   			, DATE_FORMAT(BSNS_ENDDE, '%Y-%m-%d') AS bsnsEndde
			, CONCAT(BSNS_BGNDE, ' ~ ', BSNS_ENDDE) AS bsnsDt
			, REPRSNT_TLPHON AS reprsntTlphon
			, ADRES AS adres
			, HMPG AS hmpg
			, RM AS rm
			, IF(USE_YN = true, 'Y', 'N') AS useYn
			, CHARGER_NM AS chargerNm
			, CHARGER_EMAIL AS chargerEmail
			, CHARGER_TELNO AS chargerTelno
			, CHARGER_MBTLNUM AS chargerMbtlnum
		FROM DQ_INST_INFO
		WHERE 1=1
			AND INSTT_CODE = #{loginInsttCode }
	</select>
	
	<insert id="insertInsttInfo" parameterType="map">
		INSERT INTO DQ_INST_INFO
		(
			INSTT_CODE
			, INSTT_NM
			, BSNS_BGNDE
			, BSNS_ENDDE
			, REPRSNT_TLPHON
			, HMPG
			, RM
			, USE_YN
		)
		VALUES
		(
			#{prjctSn}
			, #{insttNm} 
			, ''
			, ''
			, #{telno} 
			, ''
			, ''
			, 1
		)
	</insert>
	
	<update id="updateAnalsInssttCode" parameterType="map" > 
		UPDATE DQ_ANLS_RULE_INFO SET
			INSTT_CODE = #{prjctSn}
	</update>
	
	<select id="selectUserIdChk" parameterType="map" resultType="map">
		SELECT USER_ID FROM DQ_USER_INFO WHERE USER_ID = #{userId}
	</select>
	
	<select id="selectMenuList" parameterType="map" resultType="map">
		SELECT 
			T2.INQIRE_ORDR AS inqireOrdr
			, T2.MENU_SN AS menuSn
			, T2.UPPER_MENU_SN AS upperMenuSn
			, T2.MENU_DP_NO AS menuDp
			, T2.MENU_NM AS menuNm
			, T2.MENU_URL AS menuUrl
			, IF( (SELECT COUNT(*) FROM MENU_MANAGE T0 WHERE T0.USE_YN = 1 AND T0.UPPER_MENU_SN = T2.MENU_SN) = 0, 'Y', 'N') AS isLast
	        , IF(T2.USE_YN = true, 'Y', 'N') AS useYn
			, T1.MENU_GROUP_SN AS menuGroupSn
			, T1.MENU_GROUP_NM AS menuGroupNm
			, IF(T1.USE_YN = true, 'Y', 'N') AS groupUseYn
			, T2.MENU_ICON AS menuIcon
			, T2.MENU_LANG AS menuLang
            , T3.AUTHOR_CODE 
            , T3.USE_YN
		FROM 
			MENU_GROUP T1 
	        LEFT OUTER JOIN MENU_MANAGE T2 ON T1.MENU_GROUP_SN = T2.MENU_GROUP_SN AND T2.USE_YN = 1 AND T2.MENU_LANG = #{menuLang}
	        LEFT JOIN MENU_AUTHOR T3 ON T2.MENU_SN = T3.MENU_SN AND T3.AUTHOR_CODE = #{authCode }
		WHERE 1=1
			<if test="auth != 'ROLE_ADMIN'">
			AND T1.USE_YN = 1
			</if>
			AND (T3.USE_YN = 1 OR T3.USE_YN IS NULL) 
		ORDER BY CAST(T1.MENU_GROUP_SN AS UNSIGNED), CAST(T2.MENU_DP_NO AS UNSIGNED), CAST(T2.INQIRE_ORDR AS UNSIGNED)
	</select>
	
	<select id="selectUpMenuList" parameterType="map" resultType="map">
		SELECT 
			MENU_SN AS menuSn,
		    MENU_NM AS menuNm
		FROM MENU_MANAGE
		WHERE 1=1
			AND USE_YN = 1
			AND UPPER_MENU_SN = 0
			AND MENU_LANG = #{menuLang}
			AND MENU_GROUP_SN = #{menuGroupSn }
	</select>
	
	<select id="selectMenuGroupList" parameterType="map" resultType="map">
		SELECT 
			MENU_GROUP_SN AS menuGroupSn,
		    MENU_GROUP_NM AS menuGroupNm
		FROM MENU_GROUP
		WHERE 1=1
			AND USE_YN = 1
		ORDER BY MENU_GROUP_SN
	</select>
	
	<insert id="insertGroupMenu" parameterType="map">
		<selectKey resultType="Integer" keyProperty="menuGroupSn" order="BEFORE">
			SELECT MAX(CAST(MENU_GROUP_SN AS UNSIGNED) + 1) AS menuGroupSn FROM MENU_GROUP
		</selectKey>
	
		INSERT INTO MENU_GROUP 
		(
			MENU_GROUP_SN
			, MENU_GROUP_NM
			, USE_YN
		) VALUES (
			#{menuGroupSn }
			, #{menuGroupNm }
			, IF(#{useYn } = 'Y', 1, 0)
		)
	</insert>
	
		
	<delete id="deleteGroupMenu" parameterType="map">
		DELETE FROM MENU_GROUP WHERE MENU_GROUP_SN = #{menuGroupSn }
	</delete>
	
	<delete id="deleteGroupMenuList" parameterType="map">
		DELETE FROM MENU_MANAGE WHERE MENU_GROUP_SN = #{menuGroupSn }
	</delete>
	
	<delete id="deleteMenu" parameterType="map">
		DELETE FROM MENU_MANAGE WHERE 1=1
		AND MENU_SN = #{selectTreeNode }
	</delete>
	
	
	<update id="updateGroupMenu" parameterType="map">
		UPDATE MENU_GROUP SET
			MENU_GROUP_NM = #{menuGroupNm }
		WHERE 1=1
			AND MENU_GROUP_SN = #{menuGroupSn }
	</update>
	
	<insert id="insertMenu" parameterType="map">
		<selectKey resultType="Integer" keyProperty="menuSn" order="BEFORE">
			SELECT MAX(CAST(MENU_SN AS UNSIGNED) + 1) AS menuSn FROM MENU_MANAGE 
		</selectKey>
	
		INSERT INTO MENU_MANAGE 
		(
			MENU_SN
			, MENU_DP_NO
			, INQIRE_ORDR
			, MENU_NM
			, MENU_URL
			, MENU_ICON
			, USE_YN
			, UPPER_MENU_SN
			, MENU_GROUP_SN
			, MENU_LANG
		) VALUES (
			#{menuSn }
			, #{menuDp }
			, #{inqireOrdr }
			, #{menuNm }
			, #{menuUrl }
			, #{menuIcon }
			, IF(#{useYn } = 'Y', 1, 0)
			, #{upperMenuSn }
			, #{menuGroupSn }
			, #{menuLang }
		)
	</insert>
	
	<update id="updateMenu" parameterType="map">
		UPDATE MENU_MANAGE SET
			INQIRE_ORDR = #{inqireOrdr }
			, MENU_NM = #{menuNm }
			, MENU_URL = #{menuUrl }
			, MENU_ICON = #{menuIcon }
			, USE_YN = IF(#{useYn } = 'Y', 1, 0)
		WHERE 1=1
			AND MENU_SN = #{menuSn }
	</update>
	
	<select id="selectCommonCode" parameterType="map" resultType="map">
		SELECT 
			GROUP_CODE AS groupCode
			, GROUP_CODE_NM AS groupCodeNm
			, IF(USE_YN = true, 'Y', 'N') AS useYn
		FROM 
			DQ_CMMN_CODE
		WHERE 1=1
		<if test="searchValue == ''">			
			AND GROUP_CODE LIKE CONCAT('%', #{searchValue} ,'%' )						
		</if>
			
		<if test="searchValue != 'null' and searchValue != ''">
			<if test="searchType == 'groupCode'">
			AND GROUP_CODE LIKE CONCAT('%@', #{searchValue} ,'%' )escape '@'
			</if>
			
			<if test="searchType == 'groupCodeNm'">
			AND GROUP_CODE_NM LIKE CONCAT('%@', #{searchValue} ,'%' )escape '@'
			</if>
		</if>
	</select>
	
	<select id="selectDetailCommonCode" parameterType="map" resultType="map">
		SELECT
			GROUP_CODE AS groupCode
			, CMMN_CODE AS cmmnCode
			, CMMN_CODE_NM AS cmmnCodeNm
			, CMMN_CODE_DC AS cmmnCodeDc
			, INQIRE_ORDR AS inqireOrdr
			, IF(USE_YN = true, 'Y', 'N') AS useYn
		FROM 	
			DQ_CMMN_CODE_DETAIL
		WHERE 1=1
			AND GROUP_CODE = #{groupCode }
		ORDER BY INQIRE_ORDR
	</select>
	
	<update id="updateCommonCode" parameterType="map">
		UPDATE DQ_CMMN_CODE SET
			GROUP_CODE_NM = #{groupCodeNm } 
			, USE_YN = IF(#{useYn } = 'Y', 1, 0)
		WHERE 1=1
			AND GROUP_CODE = #{groupCode }
	</update>
	
	<insert id="insertCommonCode" parameterType="map">
		INSERT INTO DQ_CMMN_CODE(
			GROUP_CODE
			, GROUP_CODE_NM
			, USE_YN 
		) VALUES (
			#{groupCode }
			, #{groupCodeNm }
			, IF(#{useYn } = 'Y', 1, 0)
		)
	</insert>
	
	<delete id="deleteCommonCode" parameterType="map">
		DELETE FROM DQ_CMMN_CODE
		WHERE 1=1
			AND GROUP_CODE = #{groupCode }
	</delete>
	
	<insert id="insertDetailCommonCode" parameterType="map">
		INSERT INTO DQ_CMMN_CODE_DETAIL(
			GROUP_CODE
			, CMMN_CODE
			, CMMN_CODE_NM
			, CMMN_CODE_DC
			, CMMN_UPPER_CODE
			, INQIRE_ORDR
			, USE_YN
		) VALUES (
			#{detailGroupCode }
			, #{detailCmmnCode }
			, #{detailCmmnCodeNm }
			, #{detailCmmnCodeDc }
			, 0
			, IF(#{inqireOrdr } = '', 1, #{inqireOrdr })
			, IF(#{useYn } = 'Y', 1, 0)
		)
	 
	</insert>
	
	<update id="updateDetailCommonCode" parameterType="map">
		UPDATE DQ_CMMN_CODE_DETAIL SET
			CMMN_CODE_NM = #{detailCmmnCodeNm } 
			, CMMN_CODE_DC = #{detailCmmnCodeDc }
			, CMMN_CODE = #{detailCmmnCode }
			, INQIRE_ORDR = #{inqireOrdr }
			, USE_YN = IF(#{useYn } = 'Y', 1, 0)
		WHERE 1=1
			AND GROUP_CODE = #{detailGroupCode }
			AND CMMN_CODE = #{detailCmmnCode }
	</update>
	
	<delete id="deleteDetailCommonCode" parameterType="map">
		DELETE FROM DQ_CMMN_CODE_DETAIL 
		WHERE 1=1
			<if test="groupCode != null and groupCode != ''">
			AND GROUP_CODE = #{groupCode }
			</if>
			<if test="detailCmmnCode == null and detailCmmnCode == ''">
			AND GROUP_CODE = #{detailGroupCode }
			</if>
			<if test="detailCmmnCode != null and detailCmmnCode != ''">
			AND GROUP_CODE = #{detailGroupCode }
			AND CMMN_CODE = #{detailCmmnCode } 
			</if>
	</delete>
	
	<select id="selectCodeDoubleChk" parameterType="map" resultType="map">
		SELECT 
			T1.CODE_NM
		    , T1.GUBUN
		FROM ( 
				SELECT GROUP_CODE AS CODE_NM, 'G' AS GUBUN FROM DQ_CMMN_CODE
		        UNION ALL 
		        SELECT CMMN_CODE AS CODE_NM, 'D' AS GUBUN FROM DQ_CMMN_CODE_DETAIL
			) T1
		WHERE 1=1
			AND T1.GUBUN = #{gubun }
			AND T1.CODE_NM = #{searchCode }
	</select>
	
	<select id="selectManageList" parameterType="map" resultType="map">
		SELECT 
			T1.USER_ID AS userId
			, T1.USER_NM AS userNm
			, T1.CHRG_DEPT AS chrgDept
			, DATE_FORMAT(T1.RECENT_CONECT_DT, '%Y-%m-%d') AS recentConnectDt
			, T1.RM AS rm
			, IF(T1.USE_YN = true, 'Y', 'N') AS useYn
			, T3.AUTHOR_CODE AS authorCode
		    , T1.RNUM
		FROM 
			( 
			SELECT
				USER_ID, INSTT_CODE, USER_NM, CHRG_DEPT, RECENT_CONECT_DT,
				RM, USE_YN, @rownum := @rownum+1 AS RNUM
			FROM 
				DQ_USER_INFO,
				(SELECT @rownum :=0) AS R
			WHERE 1=1
			ORDER BY RECENT_CONECT_DT ASC
			) T1 
			LEFT OUTER JOIN DQ_USER_INFO T3 ON T1.USER_ID = T3.USER_ID
		WHERE 1=1
		
		ORDER BY RNUM
	</select>
	
	<update id="updateManageInfo" parameterType="map">
		UPDATE DQ_USER_INFO SET
			CHRG_DEPT = #{chrgDept } 
			, USER_NM = #{userNm }
			, USE_YN = IF(#{useYn } = 'Y', 1, 0)
			, USER_PASSWORD = #{userPw }
		WHERE 1=1
			AND USER_ID = #{userId }
	</update>
	
	<update id="updateManageInsttInfo" parameterType="map">
		UPDATE DQ_INST_INFO SET
			BSNS_BGNDE = #{bsnsBgnde } 
			, BSNS_ENDDE = #{bsnsEndde }
			, REPRSNT_TLPHON = #{reprsntTlphon }
			, HMPG = #{hmpg }
			, CHARGER_NM  = #{chargerNm }
			, CHARGER_EMAIL = #{chargerEmail } 
			, CHARGER_TELNO = #{chargerTelno }
			, CHARGER_MBTLNUM = #{chargerMbtlnum }
		WHERE 1=1
			AND INSTT_CODE = #{prjctSn }
	</update>
	
	<select id="selectUserAuthList" parameterType="map" resultType="map">
		SELECT
			T2.CMMN_CODE AS authorCode
		    , T2.CMMN_CODE_NM AS authorCodeNm
		FROM DQ_CMMN_CODE T1, DQ_CMMN_CODE_DETAIL T2
		WHERE 1=1
			AND T1.GROUP_CODE = T2.GROUP_CODE
			AND T2.GROUP_CODE = 'DQ_AUTHOR_CODE'
	</select>
	
	<select id="selectUserAuthMenuList" parameterType="map" resultType="map">
		SELECT
			T3.MENU_SN AS authMenuSn
			, T2.MENU_SN AS menuSn
			, T2.INQIRE_ORDR AS inqireOrdr
			, T2.UPPER_MENU_SN AS upperMenuSn
			, (SELECT MENU_NM FROM MENU_MANAGE T1 WHERE 1=1 AND T1.MENU_SN = (SELECT UPPER_MENU_SN FROM MENU_MANAGE T0 WHERE T0.MENU_SN = T2.MENU_SN)) AS upperMenuNm
			, T2.MENU_DP_NO AS menuDp
			, T2.MENU_NM AS menuNm
			, IF( (SELECT COUNT(*) FROM MENU_MANAGE T0 WHERE T0.USE_YN = 1 AND T0.UPPER_MENU_SN = T2.MENU_SN) = 0, 'Y', 'N') AS isLast
			, IF(T2.USE_YN = true, 'Y', 'N') AS useYn
			, T1.MENU_GROUP_SN AS menuGroupSn
			, T1.MENU_GROUP_NM AS menuGroupNm
			, IF(T3.USE_YN = true, 'Y', 'N') AS authAt
		FROM 
			MENU_GROUP T1 
			LEFT OUTER JOIN MENU_MANAGE T2 ON T1.MENU_GROUP_SN = T2.MENU_GROUP_SN AND T2.USE_YN = 1 AND T2.MENU_LANG = #{menuLang}
		    LEFT JOIN MENU_AUTHOR T3 ON T2.MENU_SN = T3.MENU_SN AND T3.AUTHOR_CODE = #{authCode }
		WHERE 1=1
			
		ORDER BY CAST(T1.MENU_GROUP_SN AS UNSIGNED), CAST(T2.MENU_DP_NO AS UNSIGNED), CAST(T2.INQIRE_ORDR AS UNSIGNED)
	</select>
	
	<update id="updateMenuAuthList" parameterType="map">
		UPDATE MENU_AUTHOR SET
			USE_YN = IF(#{useYn } = 'Y', 1, 0)
		WHERE 1=1
			AND MENU_SN = #{menuSn }
			AND AUTHOR_CODE = #{authCode }
	</update>
	
	<insert id="insertMenuAuthList" parameterType="map" > 
		INSERT INTO MENU_AUTHOR
		(
			MENU_SN, AUTHOR_CODE, USE_YN
		)
		SELECT 
			#{menuSn} , AUTHOR_CODE, 1
		FROM MENU_AUTHOR
		WHERE 1=1
		GROUP BY AUTHOR_CODE
	</insert>
	
	<delete id="deleteAuthor" parameterType="map">
		DELETE FROM MENU_AUTHOR WHERE 1=1
		AND MENU_SN = #{selectTreeNode }
	</delete>
	
	<delete id="deleteScheduler" parameterType="map">
		DELETE FROM DQ_SCHDULR
	</delete>
	
	<delete id="deleteFrqAnals" parameterType="map">
		DELETE FROM DQ_FQ_ANLS
	</delete>
	
	<delete id="deleteDgnssSave" parameterType="map">
		DELETE FROM DQ_DGNSS_INFO
	</delete>
	
	<delete id="deleteDgnssError" parameterType="map">
		DELETE FROM DQ_DGNSS_ERR_HIST
	</delete>
	
	<delete id="deleteDgnssColumnsRes" parameterType="map">
		DELETE FROM DQ_DGNSS_TRGT_COL_RULE
	</delete>
	
	<delete id="deleteDgnssColumns" parameterType="map">
		DELETE FROM DQ_DGNSS_TRGT_COL
	</delete>
	
	<delete id="deleteDnssTables" parameterType="map">
		DELETE FROM DQ_DGNSS_EXCN
	</delete>
	
	<delete id="deleteDgnssDbms" parameterType="map">
		DELETE FROM DQ_DGNSS_DBMS
	</delete>
	
	<delete id="deleteUser" parameterType="map">
		DELETE FROM `DQ_USER_INFO`
	</delete>
	
	<delete id="deleteInstt" parameterType="map">
		DELETE FROM DQ_INST_INFO
	</delete>
	
	<!-- 메인화면 쿼리 -->
	<!-- DMBS 연결 설정 -->
	<!--
	<select id="selectDbList" parameterType="map" resultType="map">
		SELECT 
			D.`DBMS_CNNC_SN`,D.DBMS_SN,I.DBMS_KND,D.`SCHEMA` , D.`IP`, D.`PORT`, D.`SID`, D.`DATABASE`, D.`ID`, D.`PASSWORD` , COUNT(T.DBMS_CNNC_SN) ODR
		FROM DQ_DGNSS_DBMS D
			LEFT  OUTER JOIN DQ_DGNSS_EXCN T ON T.DBMS_CNNC_SN = D.DBMS_CNNC_SN
			JOIN DQ_INST_DBMS I ON D.DBMS_SN = I.DBMS_SN  AND I.DBMS_KND NOT LIKE CONCAT('%', 'CSV', '%')
		WHERE 1=1
		<if test="dbmsKnd != null and dbmsKnd != ''">
		AND I.DBMS_KND = #{dbmsKnd }
		</if>
		<if test="dbmsCnncSn != null and dbmsCnncSn != ''">
		AND D.`DBMS_CNNC_SN` = #{dbmsCnncSn }
		</if>
		GROUP BY D.`DBMS_CNNC_SN`,D.DBMS_SN, I.DBMS_KND, D.`IP`, D.`PORT`, D.`SID`, D.`DATABASE`, D.`ID`, D.`PASSWORD`, D.`SCHEMA`
		ORDER BY COUNT(T.DBMS_CNNC_SN) DESC
	</select> -->
	
	<select id="selectDbList" parameterType="map" resultType="map">
		SELECT
			I.DBMS_NM
			, D.DBMS_CNNC_SN
			, D.DBMS_IP_ADDR
			, D.DBMS_PORT_NO
			, D.DBMS_SID_NM
			, D.DBMS_DATABASE_NM
			, D.DBMS_ID
			, D.DBMS_PASSWORD
			, COUNT(T.DBMS_CNNC_SN) ODR
		FROM
			CMMN_PRJCT_DBMS_CNNC_INFO D LEFT OUTER JOIN DQ_DGNSS_EXCN T ON D.DBMS_CNNC_SN = T.DBMS_CNNC_SN
			JOIN CMMN_PRJCT_DBMS I ON D.DBMS_SN = I.DBMS_SN AND I.DBMS_NM NOT LIKE CONCAT('%', 'CSV', '%')
		WHERE 1=1
		<if test="dbmsKnd != null and dbmsKnd != ''">
		AND I.DBMS_NM = #{dbmsKnd}
		</if>
		<if test="dbmsCnncSn != null and dbmsCnncSn != ''">
		AND D.DBMS_CNNC_SN = #{dbmsCnncSn}
		</if>  
		GROUP BY D.DBMS_CNNC_SN, D.DBMS_SN, I.DBMS_NM, D.DBMS_IP_ADDR, D.DBMS_PORT_NO, D.DBMS_SID_NM, D.DBMS_DATABASE_NM, D.DBMS_ID, D.DBMS_PASSWORD, D.DBMS_SCHEMA_NM
		ORDER BY COUNT(T.DBMS_CNNC_SN) DESC;
	</select>
	
	
	
	
	<select id="selectDbListTotalCnt" parameterType="map" resultType="int">
		SELECT COUNT(1) AS CNT FROM (
			SELECT 
				D.`INSTT_CODE` prjctSn
			FROM DQ_DGNSS_DBMS D, DQ_INST_DBMS I
			WHERE D.DBMS_SN = I.DBMS_SN
			<if test="tabType == 'csv'">
				AND I.DBMS_KND LIKE CONCAT('%', #{tabType}, '%')
			</if>
			<if test="tabType != 'csv'">
				AND I.DBMS_KND NOT LIKE CONCAT('%', 'csv', '%')
			</if>
		)T1
	</select>
	
	<!-- 시스템 현황-진단 항목 현황 -->
	<select id="selectAnalsCnt"  parameterType="map" resultType="map">
		SELECT A.RULE_SE_CD, A.DBMS_KND, C.CMMN_CODE_NM, COUNT(A.RULE_ID ) ANALS_CNT
		FROM DQ_ANLS_RULE_INFO A
		JOIN DQ_CMMN_CODE_DETAIL C ON C.CMMN_CODE = A.RULE_SE_CD 
		WHERE A.INSTT_CODE = #{prjctSn }
		<if test="dbmsKnd != null and dbmsKnd != ''">
			AND A.DBMS_KND = #{dbmsKnd }
		</if>
		GROUP BY A.RULE_SE_CD, A.DBMS_KND, C.CMMN_CODE_NM 
	</select>
	
	<select id="selectDbKnd" parameterType="map" resultType="String">
		SELECT 
			I.DBMS_KND as dbmsKnd
		FROM DQ_DGNSS_DBMS D, DQ_INST_DBMS I
		WHERE D.DBMS_SN = I.DBMS_SN
		<if test="dbmsCnncSn != null and dbmsCnncSn != ''">
		AND DBMS_CNNC_SN =  #{dbmsCnncSn}
		</if>
		LIMIT 1
	</select>
	
	<!-- 진단 현황-기본정보 -->
	<select id="selectBasicInfoCnt"  parameterType="map" resultType="map">
		SELECT 
			INSTT_CODE , COUNT(DGNSS_INFO_ID) AS TABLE_CNT, SUM(CNT1) AS COLUM_CNT, SUM(CNT2) AS ANALS_CNT 
		FROM (
			SELECT 
				R.INSTT_CODE , 
				R.DBMS_CNNC_SN , 
				R.DGNSS_INFO_ID , 
				COUNT(DISTINCT R.COL_NM) AS CNT1 , 
				COUNT(DISTINCT R.RULE_ID) AS CNT2,
				T.TRGT_CNT 
			FROM DQ_DGNSS_TRGT_COL_RULE R
				JOIN DQ_DGNSS_EXCN T ON R.DGNSS_INFO_ID = T.DGNSS_INFO_ID 
			WHERE R.INSTT_CODE = #{prjctSn }
			GROUP BY R.INSTT_CODE , R.DBMS_CNNC_SN , R.DGNSS_INFO_ID ,T.TRGT_CNT 
			) A
		GROUP BY INSTT_CODE
	</select>
	
	<!-- 진단 현황-진단률 -->
	<select id="selectResTotCnt"  parameterType="map" resultType="map">
		SELECT 
			INSTT_CODE, SUM(TOT_MTCHG_CNT) AS TOT_MTCHG_CNT, SUM(DATA_CNT) AS TOT_DATA_CNT 
		FROM VW_DQ_DGNSS_RESULT
		WHERE 1=1
		AND INSTT_CODE = #{prjctSn }
		<if test="dgnssInfoId != null and dgnssInfoId != ''">
		AND DGNSS_INFO_ID = #{dgnssInfoId}
		</if>
		GROUP BY INSTT_CODE
	</select>	
	
	
	<!-- 진단 현황-항목별 불일치 건수 -->
	<select id="selectResNotMatchCntToRuleNm"  parameterType="map" resultType="map">
		SELECT 
			R.INSTT_CODE, R.CMMN_CODE, R.RULE_NM, SUM(R.F_CNT) F_CNT 
		FROM (
			SELECT 
				V.INSTT_CODE ,A.RULE_NM, C.CMMN_CODE, C.CMMN_CODE_NM , (T.TRGT_CNT - V.TOT_MTCHG_CNT ) AS F_CNT
			FROM VW_DQ_DGNSS_RESULT V 
			JOIN DQ_ANLS_RULE_INFO A ON A.RULE_ID = V.RULE_ID 
			JOIN DQ_CMMN_CODE_DETAIL C ON C.CMMN_CODE = A.PTTRN_SE_CD 
			JOIN DQ_DGNSS_EXCN T ON T.DGNSS_INFO_ID = V.DGNSS_INFO_ID
			WHERE V.INSTT_CODE = #{prjctSn }
			AND LENGTH(A.RULE_NM) 	&lt; 10
			<if test="dgnssInfoId != null and dgnssInfoId != ''">
			AND V.DGNSS_INFO_ID = #{dgnssInfoId}
			</if>
		) R
		GROUP BY R.INSTT_CODE, R.CMMN_CODE, R.RULE_NM
		ORDER BY SUM(R.F_CNT) DESC, R.RULE_NM DESC
		LIMIT 5
	</select>
	
	<!-- 월별 진단 현황 -->
	<select id="selectMonthResCnt"  parameterType="map" resultType="map">
		SELECT DATE_FORMAT(D.YYYYMMDD, '%Y.%m.') AS YYYYMM, IFNULL(T.CNT,0) AS CNT
		FROM (
			SELECT DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 0 MONTH) AS  YYYYMMDD 
			UNION ALL SELECT DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 1 MONTH)  
			UNION ALL SELECT DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 2 MONTH)  
			UNION ALL SELECT DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 3 MONTH)  
			UNION ALL SELECT DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 4 MONTH) 
			UNION ALL SELECT DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 5 MONTH) 
			UNION ALL SELECT DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 6 MONTH) 
			UNION ALL SELECT DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 7 MONTH) 
			UNION ALL SELECT DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 8 MONTH) 
			UNION ALL SELECT DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 9 MONTH)
			UNION ALL SELECT DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 10 MONTH)
			UNION ALL SELECT DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL 11 MONTH)
		) D 
		LEFT OUTER JOIN  
		(
			SELECT DATE_FORMAT(REG_DT, '%Y-%m-01') AS ORDER_MONTH ,  COUNT(distinct DGNSS_INFO_ID) AS CNT FROM DQ_DGNSS_TRGT_COL_RULE WHERE INSTT_CODE = #{prjctSn }  GROUP BY ORDER_MONTH 
		) T ON D.YYYYMMDD = T.ORDER_MONTH
		ORDER BY D.YYYYMMDD ASC
	</select>
	
	
	<!-- 결과 view check -->
	<select id="selectViewCnt"  parameterType="map" resultType="int">
		SELECT
			COUNT(*) AS CNT 
		FROM INFORMATION_SCHEMA.TABLES
		WHERE TABLE_TYPE  = 'VIEW'
		AND TABLE_NAME =#{tableName}
	</select>
	
	<!-- 결과 view drop -->
	<update id="dropResView" parameterType="map">
		DROP VIEW VW_DQ_DGNSS_RESULT
	</update>
	<!-- 결과 view create -->
	<update id="createResView" parameterType="map"> 
		CREATE VIEW VW_DQ_DGNSS_RESULT AS
		SELECT R.INSTT_CODE
			, R.DGNSS_INFO_ID
			, R.COL_NM
			, R.RULE_ID
			, SUM(R.MTCHG_CNT) TOT_MTCHG_CNT
		 , (SELECT C.MTCHG_CNT FROM DQ_DGNSS_TRGT_COL_RULE C WHERE  C.RULE_ID LIKE '%01' AND C.DGNSS_INFO_ID = R.DGNSS_INFO_ID AND C.COL_NM = R.COL_NM ) DATA_CNT
		FROM DQ_DGNSS_TRGT_COL_RULE R
		JOIN DQ_ANLS_RULE_INFO A ON R.RULE_ID  = A.RULE_ID AND A.RULE_TY_CD = 'AT000200'
		GROUP BY INSTT_CODE, DGNSS_INFO_ID , R.COL_NM,RULE_ID
		ORDER BY R.DGNSS_INFO_ID DESC
	</update>
	
	<select id="selectAuthor" resultType="map">
		SELECT 
			 MENU_URL
			 , AUTHOR_CODE
		FROM 
			MENU_MANAGE AS MM 
		LEFT OUTER JOIN 
			(SELECT MENU_SN, GROUP_CONCAT(SUBSTRING_INDEX(AUTHOR_CODE, '_', -1)) AS AUTHOR_CODE, USE_YN FROM MENU_AUTHOR WHERE USE_YN = '1' GROUP BY MENU_SN) AS MA
		ON MM.MENU_SN = MA.MENU_SN 
		WHERE 1=1
		AND MM.MENU_LANG = 'KO'
	</select>

</mapper>