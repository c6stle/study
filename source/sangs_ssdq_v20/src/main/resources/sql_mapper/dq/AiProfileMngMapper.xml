<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="dq_ai_profile">

	<!-- 자동점검 실행 순번 채번 -->
	<select id="selectNextAtmcDgnssExcnSn" resultType="int">
		select
			(ifnull(max(atmc_dgnss_excn_sn), 0) + 1) as atmc_dgnss_excn_sn
		from DQ_AI_DGNSS_INFO
	</select>
	
	
	<!-- 자동점검 진단 이력 조회 -->
	<sql id="where_selectAutoDgnssInfo">
		<if test="searchKey != '' and searchKey != null ">
			<if test="searchKey == 'dbmsIpAddr'">
			and t1.dbms_ip_addr like concat('%', #{searchKeyVal}, '%')
			</if>
			<if test="searchKey == 'dbmsPortNo'">
			and t1.dbms_port_no like concat('%', #{searchKeyVal}, '%')
			</if>  
			<if test="searchKey == 'dbmsDatabaseNm'">
			and t1.dbms_database_nm like concat('%', #{searchKeyVal}, '%')
			</if>
			<if test="searchKey == 'dbmsUserId'">
			and t1.dbms_id like concat('%', #{searchKeyVal}, '%')
			</if>
			<if test="searchKey == 'excSttusCd'">
			and t1.exc_sttus_cd like concat('%', #{searchKeyVal}, '%')
			</if>
		</if>
	</sql>
	<select id="selectAutoDgnssInfo" parameterType="map" resultType="sangsMap">
		select
			t1.atmc_dgnss_excn_sn
			, DATE_FORMAT(t1.reg_dt, '%Y-%m-%d %H:%i:%s') as reg_dt
			, round(t1.database_obsry_rate, 1) as database_obsry_rate
			, t1.dbms_ip_addr
			, t1.dbms_port_no
			, t1.dbms_database_nm
			, t1.dbms_id
			, t1.nlp_anls_yn
			, t1.exc_sttus_cd
			, t1.exc_end_dt
			, (select sum(t2.dgnss_data_cnt) from DQ_AI_DGNSS_ANLS t2 where t2.atmc_dgnss_excn_sn = t1.atmc_dgnss_excn_sn) as total_cnt
			, (select sum(t2.cl_anls_err_cnt) from DQ_AI_DGNSS_ANLS t2 where t2.atmc_dgnss_excn_sn = t1.atmc_dgnss_excn_sn) as total_err_cnt
			, timestampdiff(second, t1.exc_bgng_dt, t1.exc_end_dt) as diff_second
		from DQ_AI_DGNSS_INFO t1
		where t1.prjct_sn = #{prjctSn}
		<include refid="where_selectAutoDgnssInfo" />
		order by t1.atmc_dgnss_excn_sn desc
		limit #{pageSize} offset #{offset}
	</select>
	<!-- 자동점검 이력 카운트 -->
	<select id="selectDgnssHistCnt" parameterType="map" resultType="int">
		select count(*) as count
		from DQ_AI_DGNSS_INFO t1
		where t1.prjct_sn = #{prjctSn}
		<include refid="where_selectAutoDgnssInfo" />
	</select>
	


	<!-- 자동점검 실행 정보 등록 -->
	<insert id="insertDgnssInfo" parameterType="map">
		insert into DQ_AI_DGNSS_INFO
			(atmc_dgnss_excn_sn, prjct_sn, dbms_ip_addr, dbms_port_no, dbms_sid_nm, dbms_database_nm
			, dbms_id, nlp_anls_yn, exc_sttus_cd, exc_bgng_dt, reg_user_id, reg_dt)
		values
			(#{atmcDgnssExcnSn}, #{prjctSn}, #{dbmsIpAddr}, #{dbmsPortNo}, #{dbmsSidNm}, #{dbmsDatabaseNm}
			, #{dbmsId}, #{nlpAnlsYn}, #{excSttusCd},now(), #{regUserId}, now())
	</insert>
	
	
	<!-- 자동점검 분석 결과 등록 -->
	<insert id="insertDgnssAnls" parameterType="map">
		insert into DQ_AI_DGNSS_ANLS
			(atmc_dgnss_excn_sn, dgnss_trgt_no, dgnss_tbl_nm, dgnss_col_nm, tot_data_cnt, dgnss_data_cnt
			, col_cl_predict_value, col_obsry_rate, cl_anls_err_cnt, reg_user_id, reg_dt)
		values
			(#{atmcDgnssExcnSn}, #{dgnssTrgtNo}, #{dgnssTblNm}, #{dgnssColNm}, #{totDataCnt}, #{dgnssDataCnt}
			, #{colClPredictValue}, #{colObsryRate}, #{clAnlsErrCnt}, #{regUserId}, now())
	</insert>


	<!-- 자동점검 머신러닝 결과 업데이트 -->
	<update id="updateDgnssAnls" parameterType="map">
		update DQ_AI_DGNSS_ANLS
		set col_cl_predict_value = #{colClPredictValue}
			, col_obsry_rate = #{colObsryRate}
			, cl_anls_err_cnt = #{clAnlsErrCnt}
		where atmc_dgnss_excn_sn = #{atmcDgnssExcnSn}
		and dgnss_tbl_nm = #{dgnssTblNm}
		and dgnss_col_nm = #{dgnssColNm}
	</update>


	<!-- 자동점검 종료 업데이트 -->
	<update id="updateExcSttusCd" parameterType="map">
		update DQ_AI_DGNSS_INFO
		set exc_sttus_cd = #{excSttusCd}
		<if test='excSttusCd == "E"'>
			, exc_end_dt = now()
			, database_obsry_rate = (select 
										(sum(dgnss_data_cnt) - sum(cl_anls_err_cnt)) / sum(dgnss_data_cnt) * 100
							   		 from DQ_AI_DGNSS_ANLS
							   		 where dgnss_data_cnt != 0
							   		 and atmc_dgnss_excn_sn = #{atmcDgnssExcnSn}) 
		</if>
		where atmc_dgnss_excn_sn = #{atmcDgnssExcnSn}
	</update>


	<!-- 점검 결과 기본 정보 조회 -->
	<select id="selectAnlsBasicInfo" parameterType="map" resultType="sangsMap">
		select
			t1.database_obsry_rate
			, ifnull((select database_obsry_rate
					  from DQ_AI_DGNSS_INFO
					  where atmc_dgnss_excn_sn = (select max(atmc_dgnss_excn_sn) as bf_atmc_dgnss_excn_sn
					  							  from DQ_AI_DGNSS_INFO
					  							  where prjct_sn = (select prjct_sn
					  							  					from DQ_AI_DGNSS_INFO
					  							  					where atmc_dgnss_excn_sn = #{atmcDgnssExcnSn}
					  							  					)
					  							  and atmc_dgnss_excn_sn <![CDATA[<]]> #{atmcDgnssExcnSn}
					  							  )
					  ), 0) as bf_database_obsry_rate
			, count(distinct t2.dgnss_tbl_nm) as table_count
			, count(t2.dgnss_col_nm) as column_count
			, sum(t2.dgnss_data_cnt) as data_count
			, sum(t2.cl_anls_err_cnt) as error_count
			, (select sum(dgnss_data_cnt) from DQ_AI_DGNSS_ANLS where col_cl_predict_value = '3_0' and atmc_dgnss_excn_sn = #{atmcDgnssExcnsn}) as nlp_data_count
			, sum(t2.nlp_anls_err_cnt) as nlp_error_count
		from DQ_AI_DGNSS_INFO t1
			, DQ_AI_DGNSS_ANLS t2
		where t1.atmc_dgnss_excn_sn = t2.atmc_dgnss_excn_sn
		and t2.atmc_dgnss_excn_sn = #{atmcDgnssExcnSn}
		and t2.col_obsry_rate is not null
	</select>
	

	<!-- 컬럼 데이터 준수율 증감률(이전 대비) 조회 -->
	<select id="selectColObsryRateTrends" parameterType="map" resultType="sangsMap">
		select
			round(sum(case when atmc_dgnss_excn_sn = #{atmcDgnssExcnSn}
					  then col_obsry_rate
					  when atmc_dgnss_excn_sn = (select max(atmc_dgnss_excn_sn)
					  							 from DQ_AI_DGNSS_INFO
					  							 where prjct_sn = (select prjct_sn
					  							 				   from DQ_AI_DGNSS_INFO
					  							 				   where atmc_dgnss_excn_sn = #{atmcDgnssExcnSn}
					  							 				   )
					  							 and atmc_dgnss_excn_sn <![CDATA[<]]> #{atmcDgnssExcnSn}
					  							 )
					  then (-1) * col_obsry_rate
					  end), 4) as col_obsry_rate
			, concat(dgnss_tbl_nm, ".", dgnss_col_nm) as data_position
		from DQ_AI_DGNSS_ANLS
		group by dgnss_tbl_nm, dgnss_col_nm
		having col_obsry_rate != 0
		order by col_obsry_rate
	</select>
	
	
	<!-- 대상 DB 데이터 준수율 추세 -->
	<select id="selectDatabaseObsryRateTrends" parameterType="map" resultType="sangsMap">
		select
			atmc_dgnss_excn_sn
			, database_obsry_rate
		from DQ_AI_DGNSS_INFO
		where dbms_ip_addr = #{dbmsIpAddr}
		and dbms_database_nm = #{dbmsDatabaseNm}
		and dbms_port_no = #{dbmsPortNo}
		and dbms_id = #{dbmsId}
		and prjct_sn = #{prjctSn}
		<if test="dbmsSidNm != '' or dbmsSidNm != null">
			and dbms_sid_nm = #{dbmsSidNm}
		</if>
	</select>	


	<!-- 점검결과 컬럼정보 테이블 조회 -->
	<sql id="where_selectClAnlsList">
		<if test="dgnssTblNm != '' and dgnssTblNm != null">
			and dgnss_tbl_nm like concat('%', #{dgnssTblNm}, '%')
		</if>
		<if test="dgnssColNm != '' and dgnssColNm != null">
			and dgnss_col_nm like concat('%', #{dgnssColNm}, '%')
		</if>
	</sql>
	<select id="selectClAnlsList" parameterType="map" resultType="sangsMap">
		select
			dgnss_trgt_no
			, dgnss_tbl_nm
			, dgnss_col_nm
			, col_cl_predict_value
			, tot_data_cnt
			, dgnss_data_cnt
			, cl_anls_err_cnt
			, round(col_obsry_rate, 2) as col_obsry_rate
		from DQ_AI_DGNSS_ANLS
		where atmc_dgnss_excn_sn = #{atmcDgnssExcnSn}
		and dgnss_data_cnt != 0
		and col_cl_predict_value != 'unknown'
		<include refid="where_selectClAnlsList" />
		order by col_obsry_rate asc
		<if test="pageSize != '' and pageSize != null">
		limit #{pageSize} offset #{offset}
		</if>
	</select>
	<select id="selectClAnlsListCnt" parameterType="map" resultType="int">
		select
			count(*) as count
		from DQ_AI_DGNSS_ANLS
		where atmc_dgnss_excn_sn = #{atmcDgnssExcnSn}
		and dgnss_data_cnt != 0
		and col_cl_predict_value != 'unknown'
		<include refid="where_selectClAnlsList" />
	</select>
	
	
	<!-- 점검 결과 데이터 준수율 순위 -->
	<select id="selectColObsryRateRank" parameterType="map" resultType="sangsMap">
		select
			concat(dgnss_tbl_nm, '.', dgnss_col_nm) as data_position
			, col_obsry_rate
			, col_cl_predict_value
		from dq_ai_dgnss_anls
		where atmc_dgnss_excn_sn = #{atmcDgnssExcnSn}
		and col_obsry_rate is not null
		and col_obsry_rate != 100
		<choose>
			<when test="order=='asc' and order!=null">
				order by col_obsry_rate asc
			</when>
			<otherwise>
				order by col_obsry_rate desc
			</otherwise>
		</choose>
		limit 15
	</select>

</mapper>




